<?xml version="1.0" encoding="utf-8"?>
<project title="me-tools" version="2.9.1">
  <partials/>
  <file path="View/Helper/HtmlHelper.php" generated-path="View.Helper.HtmlHelper.html" hash="2436f6b6737d08a82284d9385c1f5aab" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="see" line="0" description="HtmlHelper" link="http://api.cakephp.org/3.4/class-Cake.View.Helper.HtmlHelper.html"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Exception">\Cake\Core\Exception\Exception</namespace-alias>
    <namespace-alias name="CakeHtmlHelper">\Cake\View\Helper\HtmlHelper</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\View\Helper" line="22" package="Default">
      <extends>\Cake\View\Helper\HtmlHelper</extends>
      <name>HtmlHelper</name>
      <full_name>\MeTools\View\Helper\HtmlHelper</full_name>
      <docblock line="22">
        <description>Provides functionalities for HTML code</description>
        <long-description></long-description>
        <tag name="package" line="22" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="MeTools\View\Helper" line="28" package="Default">
        <name>$helpers</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::$helpers</full_name>
        <default>array('MeTools.Icon', 'Url')</default>
        <docblock line="28">
          <description>Helpers</description>
          <long-description></long-description>
          <tag name="var" line="28" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="40" package="Default">
        <name>__call</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::__call()</full_name>
        <docblock line="40">
          <description>Missing method handler.</description>
          <long-description>If you pass no more than two parameters, it tries to generate a html
 tag with the name of the method and works as alias of `tag()`.</long-description>
          <tag name="param" line="40" description="&lt;p&gt;Name of the tag&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="40" description="&lt;p&gt;Params for the method&lt;/p&gt;" type="array" variable="$params">
            <type>array</type>
          </tag>
          <tag name="return" line="40" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="40" description="" link="\MeTools\View\Helper\HtmlHelper::tag()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$params</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="55" package="Default">
        <name>badge</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::badge()</full_name>
        <docblock line="55">
          <description>Creates a badge, according to Bootstrap</description>
          <long-description></long-description>
          <tag name="param" line="55" description="&lt;p&gt;Badge text&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="param" line="55" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="55" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="55" description="Bootstrap documentation" link="http://getbootstrap.com/components/#badges"/>
          <tag name="uses" line="55" description="" link="\MeTools\View\Helper\HtmlHelper::tag()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="75" package="Default">
        <name>button</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::button()</full_name>
        <docblock line="75">
          <description>Creates a button (`&lt;button&gt;` tag).</description>
          <long-description>If `$url` is not null, creates a link (`&lt;a&gt;` tag) with the appearance
 of a button.</long-description>
          <tag name="param" line="75" description="&lt;p&gt;Button title&lt;/p&gt;" type="string|null" variable="$title">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="75" description="&lt;p&gt;Cake-relative URL or array of URL&#10;parameters or external URL&lt;/p&gt;" type="string|array|null" variable="$url">
            <type>string</type>
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="75" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="75" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="75" description="" link="\MeTools\View\Helper\HtmlHelper::link()"/>
          <tag name="uses" line="75" description="" link="\MeTools\View\Helper\HtmlHelper::tag()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default>null</default>
          <type>string|array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="97" package="Default">
        <name>css</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::css()</full_name>
        <docblock line="97">
          <description>Adds a css file to the layout.</description>
          <long-description>If it's used in the layout, you should set the `inline` option to `true`.</long-description>
          <tag name="param" line="97" description="&lt;p&gt;CSS filename or an array of CSS filenames&lt;/p&gt;" type="mixed" variable="$path">
            <type>mixed</type>
          </tag>
          <tag name="param" line="97" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="97" description="Html, `&lt;link&gt;` or `&lt;style&gt;` tag" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="112" package="Default">
        <name>cssBlock</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::cssBlock()</full_name>
        <docblock line="112">
          <description>Wrap `$css` in a style tag</description>
          <long-description></long-description>
          <tag name="param" line="112" description="&lt;p&gt;The CSS code to wrap&lt;/p&gt;" type="string" variable="$css">
            <type>string</type>
          </tag>
          <tag name="param" line="112" description="&lt;p&gt;The options to use. Options not listed above will&#10; be treated as HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="112" description="String or `null`, depending on the value of&#10; $options['block']`" type="string|null">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$css</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="139" package="Default">
        <name>cssStart</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::cssStart()</full_name>
        <docblock line="139">
          <description>Begin a CSS block that captures output until `cssEnd()` is called. This
 capturing block will capture all output between the methods and create
 a cssBlock from it</description>
          <long-description></long-description>
          <tag name="param" line="139" description="&lt;p&gt;Options for the code block.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="139" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="153" package="Default">
        <name>cssEnd</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::cssEnd()</full_name>
        <docblock line="153">
          <description>End a buffered section of css capturing.</description>
          <long-description>Generates a style tag inline or appends to specified view block
 depending on the settings used when the cssBlock was started.</long-description>
          <tag name="return" line="153" description="Depending on the settings of `cssStart()`, either a&#10; style tag or null" type="string|null">
            <type>string</type>
            <type>null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="179" package="Default">
        <name>heading</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::heading()</full_name>
        <docblock line="179">
          <description>Creates an heading, according to Bootstrap.</description>
          <long-description>This method is useful if you want to create an heading with a secondary
 text. In this case you have to use the `small` option.

By default, this method creates an `&lt;h2&gt;` tag. To create a different
 tag, you have to use the `type` option.</long-description>
          <tag name="param" line="179" description="&lt;p&gt;Heading text&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="param" line="179" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="179" description="&lt;p&gt;Small text&lt;/p&gt;" type="string|null" variable="$small">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="179" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$smallOptions">
            <type>array</type>
          </tag>
          <tag name="return" line="179" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="179" description="Bootstrap documentation" link="http://getbootstrap.com/css/#type-headings"/>
          <tag name="uses" line="179" description="" link="\MeTools\View\Helper\small()"/>
          <tag name="uses" line="179" description="" link="\MeTools\View\Helper\HtmlHelper::tag()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$small</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$smallOptions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="196" package="Default">
        <name>hr</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::hr()</full_name>
        <docblock line="196">
          <description>Creates an horizontal rule (`&lt;hr&gt;` tag)</description>
          <long-description></long-description>
          <tag name="param" line="196" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="196" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="196" description="" link="\MeTools\View\Helper\HtmlHelper::tag()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="213" package="Default">
        <name>iframe</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::iframe()</full_name>
        <docblock line="213">
          <description>Create an `&lt;iframe&gt;` element.</description>
          <long-description>You can use the `$ratio` option (valid values: `16by9` or `4by3`) to
 create a responsive embed.</long-description>
          <tag name="param" line="213" description="&lt;p&gt;Url for the iframe&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="param" line="213" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="213" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="213" description="Responsive embed" link="http://getbootstrap.com/components/#responsive-embed"/>
          <tag name="uses" line="213" description="" link="\MeTools\View\Helper\div()"/>
          <tag name="uses" line="213" description="" link="\MeTools\View\Helper\HtmlHelper::tag()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="240" package="Default">
        <name>image</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::image()</full_name>
        <docblock line="240">
          <description>Creates a formatted `&lt;img&gt;` element</description>
          <long-description></long-description>
          <tag name="param" line="240" description="&lt;p&gt;Path to the image file, relative to the&#10;&lt;code&gt;APP/webroot/img/&lt;/code&gt; directory&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="240" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="240" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="254" package="Default">
        <name>img</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::img()</full_name>
        <docblock line="254">
          <description>Alias for `image()` method</description>
          <long-description></long-description>
          <tag name="return" line="254" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="254" description="" link="\MeTools\View\Helper\HtmlHelper::image()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="275" package="Default">
        <name>label</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::label()</full_name>
        <docblock line="275">
          <description>Create a label, according to the Bootstrap component.</description>
          <long-description>This method creates only a label element. Not to be confused with the
 `label()` method provided by `Formhelper`, which creates a label
 for a form input.

You can set the type of label using the `type` option.
The values supported by Bootstrap are: `default`, `primary`, `success`,
 `info`, `warning` and `danger`.</long-description>
          <tag name="param" line="275" description="&lt;p&gt;Label text&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="param" line="275" description="&lt;p&gt;HTML attributes of the list tag&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="275" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="275" description="Bootstrap documentation" link="http://getbootstrap.com/components/#labels"/>
          <tag name="uses" line="275" description="" link="\MeTools\View\Helper\HtmlHelper::tag()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="293" package="Default">
        <name>li</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::li()</full_name>
        <docblock line="293">
          <description>Returns an element list (`&lt;li&gt;`).</description>
          <long-description>If `$element` is an array, the same `$options` will be applied to all
 elements</long-description>
          <tag name="param" line="293" description="&lt;p&gt;Element or elements&lt;/p&gt;" type="string|array" variable="$element">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="param" line="293" description="&lt;p&gt;HTML attributes of the list tag&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="293" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="293" description="" link="\MeTools\View\Helper\HtmlHelper::tag()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$element</name>
          <default></default>
          <type>string|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="314" package="Default">
        <name>link</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::link()</full_name>
        <docblock line="314">
          <description>Creates an HTML link</description>
          <long-description></long-description>
          <tag name="param" line="314" description="&lt;p&gt;The content to be wrapped by &lt;a&gt; tags&lt;/p&gt;" type="string|null" variable="$title">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="314" description="&lt;p&gt;Cake-relative URL or array of URL&#10;parameters or external URL&lt;/p&gt;" type="string|array|null" variable="$url">
            <type>string</type>
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="314" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="314" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default>null</default>
          <type>string|array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="332" package="Default">
        <name>meta</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::meta()</full_name>
        <docblock line="332">
          <description>Creates a link to an external resource and handles basic meta tags</description>
          <long-description></long-description>
          <tag name="param" line="332" description="&lt;p&gt;The title of the external resource&lt;/p&gt;" type="string|array" variable="$type">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="param" line="332" description="&lt;p&gt;The address of the external resource&#10; or string for content attribute&lt;/p&gt;" type="string|array|null" variable="$content">
            <type>string</type>
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="332" description="&lt;p&gt;Other attributes for the generated tag. If the&#10;type attribute is html, rss, atom, or icon, the mime-type is returned&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="332" description="A completed `&lt;link /&gt;` element" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default></default>
          <type>string|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$content</name>
          <default>null</default>
          <type>string|array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="346" package="Default">
        <name>nestedList</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::nestedList()</full_name>
        <docblock line="346">
          <description>Returns a list (`&lt;ol&gt;` or `&lt;ul&gt;` tag)</description>
          <long-description></long-description>
          <tag name="param" line="346" description="&lt;p&gt;Elements list&lt;/p&gt;" type="array" variable="$list">
            <type>array</type>
          </tag>
          <tag name="param" line="346" description="&lt;p&gt;HTML attributes of the list tag&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="346" description="&lt;p&gt;HTML attributes of the list items&lt;/p&gt;" type="array" variable="$itemOptions">
            <type>array</type>
          </tag>
          <tag name="return" line="346" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$list</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$itemOptions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="376" package="Default">
        <name>ol</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::ol()</full_name>
        <docblock line="376">
          <description>Returns an unordered list (`&lt;ol&gt;` tag)</description>
          <long-description></long-description>
          <tag name="param" line="376" description="&lt;p&gt;Elements list&lt;/p&gt;" type="array" variable="$list">
            <type>array</type>
          </tag>
          <tag name="param" line="376" description="&lt;p&gt;HTML attributes of the list tag&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="376" description="&lt;p&gt;HTML attributes of the list items&lt;/p&gt;" type="array" variable="$itemOptions">
            <type>array</type>
          </tag>
          <tag name="return" line="376" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="376" description="" link="\MeTools\View\Helper\HtmlHelper::nestedList()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$list</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$itemOptions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="388" package="Default">
        <name>para</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::para()</full_name>
        <docblock line="388">
          <description>Returns a formatted `&lt;p&gt;` tag.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;Class name&lt;/p&gt;" type="string|null" variable="$class">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;Paragraph text&lt;/p&gt;" type="string|null" variable="$text">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="388" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="405" package="Default">
        <name>script</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::script()</full_name>
        <docblock line="405">
          <description>Adds a js file to the layout.</description>
          <long-description>If it's used in the layout, you should set the `inline` option to `true`.</long-description>
          <tag name="param" line="405" description="&lt;p&gt;Javascript files as string or array&lt;/p&gt;" type="mixed" variable="$url">
            <type>mixed</type>
          </tag>
          <tag name="param" line="405" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="405" description="String of `&lt;script /&gt;` tags or `null` if `$inline` is false&#10; or if `$once` is true and the file has been included before" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="418" package="Default">
        <name>scriptBlock</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::scriptBlock()</full_name>
        <docblock line="418">
          <description>Returns a Javascript code block</description>
          <long-description></long-description>
          <tag name="param" line="418" description="&lt;p&gt;Javascript code&lt;/p&gt;" type="string" variable="$code">
            <type>string</type>
          </tag>
          <tag name="param" line="418" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="418" description="A script tag or `null`" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$code</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="436" package="Default">
        <name>scriptStart</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::scriptStart()</full_name>
        <docblock line="436">
          <description>Starts capturing output for Javascript code.</description>
          <long-description>To end capturing output, you can use the `scriptEnd()` method.

To capture output with a single method, you can also use the
 `scriptBlock()` method.</long-description>
          <tag name="param" line="436" description="&lt;p&gt;Options for the code block&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="436" description="A script tag or `null`" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="see" line="436" description="" link="\MeTools\View\Helper\HtmlHelper::scriptBlock()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="453" package="Default">
        <name>shareaholic</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::shareaholic()</full_name>
        <docblock line="453">
          <description>Returns the Shareaholic "share buttons".</description>
          <long-description>Note that this code only renders the Shareaholic "share button".
To add the "setup code", you have to use the `LayoutHelper`.</long-description>
          <tag name="param" line="453" description="&lt;p&gt;Shareaholic app ID&lt;/p&gt;" type="string" variable="$appId">
            <type>string</type>
          </tag>
          <tag name="return" line="453" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="453" description="" link="\MeTools\View\Helper\MeTools\View\Helper\LayoutHelper::shareaholic()"/>
          <tag name="uses" line="453" description="" link="\MeTools\View\Helper\div()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$appId</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="469" package="Default">
        <name>tag</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::tag()</full_name>
        <docblock line="469">
          <description>Returns a formatted block tag</description>
          <long-description></long-description>
          <tag name="param" line="469" description="&lt;p&gt;Tag name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="469" description="&lt;p&gt;Tag content. If &lt;code&gt;null&lt;/code&gt;, only a start tag will be&#10;printed&lt;/p&gt;" type="string|null" variable="$text">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="469" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="469" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="485" package="Default">
        <name>ul</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::ul()</full_name>
        <docblock line="485">
          <description>Returns an unordered list (`&lt;ul&gt;` tag)</description>
          <long-description></long-description>
          <tag name="param" line="485" description="&lt;p&gt;Elements list&lt;/p&gt;" type="array" variable="$list">
            <type>array</type>
          </tag>
          <tag name="param" line="485" description="&lt;p&gt;HTML attributes of the list tag&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="485" description="&lt;p&gt;HTML attributes of the list items&lt;/p&gt;" type="array" variable="$itemOptions">
            <type>array</type>
          </tag>
          <tag name="return" line="485" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="485" description="" link="\MeTools\View\Helper\HtmlHelper::nestedList()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$list</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$itemOptions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="499" package="Default">
        <name>viewport</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::viewport()</full_name>
        <docblock line="499">
          <description>Adds the `viewport` meta tag. By default, it uses options as required
 by Bootstrap</description>
          <long-description></long-description>
          <tag name="param" line="499" description="&lt;p&gt;Attributes for the generated tag. If the type&#10;attribute is html, rss, atom, or icon, the mime-type is returned&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="499" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="499" description="Bootstrap documentation" link="http://getbootstrap.com/css/#overview-mobile"/>
          <tag name="uses" line="499" description="" link="\MeTools\View\Helper\HtmlHelper::meta()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="520" package="Default">
        <name>youtube</name>
        <full_name>\MeTools\View\Helper\HtmlHelper::youtube()</full_name>
        <docblock line="520">
          <description>Adds a YouTube video.</description>
          <long-description>You can use the `$ratio` option (valid values: `16by9` or `4by3`) to
 create a responsive embed.</long-description>
          <tag name="param" line="520" description="&lt;p&gt;YouTube video ID&lt;/p&gt;" type="string" variable="$id">
            <type>string</type>
          </tag>
          <tag name="param" line="520" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="520" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="520" description="" link="\MeTools\View\Helper\HtmlHelper::iframe()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="TestSuite/MockTrait.php" generated-path="TestSuite.MockTrait.html" hash="9ce04f7cc38dfc78283fe31322965b5c" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.17.5"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="ComponentRegistry">\Cake\Controller\ComponentRegistry</namespace-alias>
    <namespace-alias name="Controller">\Cake\Controller\Controller</namespace-alias>
    <namespace-alias name="View">\Cake\View\View</namespace-alias>
    <trait namespace="MeTools\TestSuite" line="23" package="Default">
      <name>MockTrait</name>
      <full_name>\MeTools\TestSuite\MockTrait</full_name>
      <docblock line="23">
        <description>A mock trait</description>
        <long-description></long-description>
        <tag name="package" line="23" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="31" package="Default">
        <name>getControllerAlias</name>
        <full_name>\MeTools\TestSuite\MockTrait::getControllerAlias()</full_name>
        <docblock line="31">
          <description>Gets the alias for a controller</description>
          <long-description></long-description>
          <tag name="param" line="31" description="&lt;p&gt;Controller class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="return" line="31" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="31" description="" type="\ReflectionException">
            <type>\ReflectionException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="42" package="Default">
        <name>getMockForComponent</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForComponent()</full_name>
        <docblock line="42">
          <description>Mocks a component</description>
          <long-description></long-description>
          <tag name="param" line="42" description="&lt;p&gt;Component class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="42" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="return" line="42" description="" type="\Cake\Controller\Component|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\Controller\Component</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="58" package="Default">
        <name>getMockForController</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForController()</full_name>
        <docblock line="58">
          <description>Mocks a controller</description>
          <long-description></long-description>
          <tag name="param" line="58" description="&lt;p&gt;Controller class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;Controller alias&lt;/p&gt;" type="string" variable="$alias">
            <type>string</type>
          </tag>
          <tag name="return" line="58" description="" type="\Cake\Controller\Controller|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\Controller\Controller</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
          <tag name="uses" line="58" description="" link="\MeTools\TestSuite\MockTrait::getControllerAlias()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$alias</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="75" package="Default">
        <name>getMockForHelper</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForHelper()</full_name>
        <docblock line="75">
          <description>Mocks an helper</description>
          <long-description></long-description>
          <tag name="param" line="75" description="&lt;p&gt;Helper class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="75" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="return" line="75" description="" type="\Cake\View\Helper|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\View\Helper</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="93" package="Default">
        <name>getOriginClassName</name>
        <full_name>\MeTools\TestSuite\MockTrait::getOriginClassName()</full_name>
        <docblock line="93">
          <description>Gets the classname for which a test is being performed, starting from the
 test class name.</description>
          <long-description>Example: class `MyPlugin\Test\TestCase\Controller\PagesControllerTest`
 will return the string `MyPlugin\Controller\PagesController`.</long-description>
          <tag name="param" line="93" description="&lt;p&gt;A test class as object or string&lt;/p&gt;" type="object|string" variable="$testClass">
            <type>object</type>
            <type>string</type>
          </tag>
          <tag name="return" line="93" description="The class name for which a test is being performed" type="string">
            <type>string</type>
          </tag>
          <tag name="since" line="93" description="2.18.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$testClass</name>
          <default></default>
          <type>object|string</type>
        </argument>
      </method>
    </trait>
  </file>
  <file path="Command/Install/RunAllCommand.php" generated-path="Command.Install.RunAllCommand.html" hash="714819ac98c8ee86f8f5b246f15e9c19" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.0"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Arguments">\Cake\Console\Arguments</namespace-alias>
    <namespace-alias name="ConsoleIo">\Cake\Console\ConsoleIo</namespace-alias>
    <namespace-alias name="ConsoleOptionParser">\Cake\Console\ConsoleOptionParser</namespace-alias>
    <namespace-alias name="Hash">\Cake\Utility\Hash</namespace-alias>
    <namespace-alias name="CreateDirectoriesCommand">\MeTools\Command\Install\CreateDirectoriesCommand</namespace-alias>
    <namespace-alias name="CreatePluginsLinksCommand">\MeTools\Command\Install\CreatePluginsLinksCommand</namespace-alias>
    <namespace-alias name="CreateRobotsCommand">\MeTools\Command\Install\CreateRobotsCommand</namespace-alias>
    <namespace-alias name="CreateVendorsLinksCommand">\MeTools\Command\Install\CreateVendorsLinksCommand</namespace-alias>
    <namespace-alias name="FixComposerJsonCommand">\MeTools\Command\Install\FixComposerJsonCommand</namespace-alias>
    <namespace-alias name="SetPermissionsCommand">\MeTools\Command\Install\SetPermissionsCommand</namespace-alias>
    <namespace-alias name="Command">\MeTools\Console\Command</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Command\Install" line="31" package="Default">
      <extends>\MeTools\Console\Command</extends>
      <name>RunAllCommand</name>
      <full_name>\MeTools\Command\Install\RunAllCommand</full_name>
      <docblock line="31">
        <description>Executes all available commands</description>
        <long-description></long-description>
        <tag name="package" line="31" description="Default"/>
        <tag name="inherited_from" description="\MeTools\Console\Command" refers="\MeTools\Console\Command" link="/classes/MeTools.Console.Command.html"/>
      </docblock>
      <property static="false" visibility="public" namespace="MeTools\Command\Install" line="37" package="Default">
        <name>$questions</name>
        <full_name>\MeTools\Command\Install\RunAllCommand::$questions</full_name>
        <default>array()</default>
        <docblock line="37">
          <description>Questions</description>
          <long-description></long-description>
          <tag name="var" line="37" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="44" package="Default">
        <name>buildOptionParser</name>
        <full_name>\MeTools\Command\Install\RunAllCommand::buildOptionParser()</full_name>
        <docblock line="44">
          <description>Hook method for defining this command's option parser</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;The parser to be defined&lt;/p&gt;" type="\Cake\Console\ConsoleOptionParser" variable="$parser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
          <tag name="return" line="44" description="" type="\Cake\Console\ConsoleOptionParser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parser</name>
          <default></default>
          <type>\Cake\Console\ConsoleOptionParser</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="59" package="Default">
        <name>__construct</name>
        <full_name>\MeTools\Command\Install\RunAllCommand::__construct()</full_name>
        <docblock line="59">
          <description>Constructor</description>
          <long-description></long-description>
          <tag name="uses" line="59" description="" link="\MeTools\Command\Install\RunAllCommand::$questions"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="104" package="Default">
        <name>execute</name>
        <full_name>\MeTools\Command\Install\RunAllCommand::execute()</full_name>
        <docblock line="104">
          <description>Executes all available commands</description>
          <long-description></long-description>
          <tag name="param" line="104" description="&lt;p&gt;The command arguments&lt;/p&gt;" type="\Cake\Console\Arguments" variable="$args">
            <type>\Cake\Console\Arguments</type>
          </tag>
          <tag name="param" line="104" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="return" line="104" description="The exit code or null for success" type="null|integer">
            <type>null</type>
            <type>integer</type>
          </tag>
          <tag name="uses" line="104" description="" link="\MeTools\Command\Install\RunAllCommand::$questions"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>\Cake\Console\Arguments</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="34" package="Default">
        <name>verboseIfFileExists</name>
        <full_name>\MeTools\Console\Command::verboseIfFileExists()</full_name>
        <docblock line="34">
          <description>Internal method to check if a file already exists and output a warning at
 the verbose level</description>
          <long-description></long-description>
          <tag name="param" line="34" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="34" description="&lt;p&gt;Path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="34" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="53" package="Default">
        <name>copyFile</name>
        <full_name>\MeTools\Console\Command::copyFile()</full_name>
        <docblock line="53">
          <description>Copies a file</description>
          <long-description></long-description>
          <tag name="param" line="53" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Source file&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Destination file&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="53" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="53" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="85" package="Default">
        <name>createDir</name>
        <full_name>\MeTools\Console\Command::createDir()</full_name>
        <docblock line="85">
          <description>Creates a directory.</description>
          <long-description>This method creates directories recursively.</long-description>
          <tag name="param" line="85" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;Directory path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::folderChmod()"/>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="111" package="Default">
        <name>createFile</name>
        <full_name>\MeTools\Console\Command::createFile()</full_name>
        <docblock line="111">
          <description>Creates a file at given path</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Where to put the file&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Content to put in the file&lt;/p&gt;" type="string" variable="$contents">
            <type>string</type>
          </tag>
          <tag name="return" line="111" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="111" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contents</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="123" package="Default">
        <name>createLink</name>
        <full_name>\MeTools\Console\Command::createLink()</full_name>
        <docblock line="123">
          <description>Creates a symbolic link</description>
          <long-description></long-description>
          <tag name="param" line="123" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Source file or directory&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Destination file or directory&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="154" package="Default">
        <name>folderChmod</name>
        <full_name>\MeTools\Console\Command::folderChmod()</full_name>
        <docblock line="154">
          <description>Sets folder chmods.</description>
          <long-description>This method applies permissions recursively.</long-description>
          <tag name="param" line="154" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Folder path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Chmod&lt;/p&gt;" type="integer" variable="$chmod">
            <type>integer</type>
          </tag>
          <tag name="return" line="154" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$chmod</name>
          <default>511</default>
          <type>integer</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
    </class>
  </file>
  <file path="Core/Plugin.php" generated-path="Core.Plugin.html" hash="969796d7ab5115b15df8b90f21cbab6f" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="see" line="0" description="Plugin" link="http://api.cakephp.org/3.4/class-Cake.Core.Plugin.html"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="MissingPluginException">\Cake\Core\Exception\MissingPluginException</namespace-alias>
    <namespace-alias name="CakePlugin">\Cake\Core\Plugin</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Core" line="22" package="Default">
      <extends>\Cake\Core\Plugin</extends>
      <name>Plugin</name>
      <full_name>\MeTools\Core\Plugin</full_name>
      <docblock line="22">
        <description>An utility to handle plugins</description>
        <long-description></long-description>
        <tag name="package" line="22" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="MeTools\Core" line="35" package="Default">
        <name>all</name>
        <full_name>\MeTools\Core\Plugin::all()</full_name>
        <docblock line="35">
          <description>Gets all loaded plugins.</description>
          <long-description>Available options are:
 - `core`, if `false` exclude the core plugins;
 - `exclude`, a plugin as string or an array of plugins to be excluded;
 - `order`, if `true` the plugins will be sorted.</long-description>
          <tag name="param" line="35" description="&lt;p&gt;Options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="35" description="Plugins" type="array">
            <type>array</type>
          </tag>
          <tag name="uses" line="35" description="" link="\MeTools\Core\Cake\Core\Plugin::loaded()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="MeTools\Core" line="64" package="Default">
        <name>path</name>
        <full_name>\MeTools\Core\Plugin::path()</full_name>
        <docblock line="64">
          <description>Gets a path for a plugin.</description>
          <long-description>It can also be used to get the path of a plugin file.</long-description>
          <tag name="param" line="64" description="&lt;p&gt;Plugin name&lt;/p&gt;" type="string" variable="$plugin">
            <type>string</type>
          </tag>
          <tag name="param" line="64" description="&lt;p&gt;File&lt;/p&gt;" type="string|null" variable="$file">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="64" description="&lt;p&gt;Checks if the file exists&lt;/p&gt;" type="boolean" variable="$check">
            <type>boolean</type>
          </tag>
          <tag name="return" line="64" description="Path of the plugin or path of the path of a plugin file" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="64" description="" type="\Cake\Core\Exception\MissingPluginException">
            <type>\Cake\Core\Exception\MissingPluginException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$plugin</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$check</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Core/global_functions.php" generated-path="Core.global_functions.html" hash="68be2f27637f1417e1cfa1b879ac07e0" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="OptionsParser">\MeTools\View\OptionsParser</namespace-alias>
    <function namespace="" line="22" package="Default">
      <name>optionsParser</name>
      <full_name>\optionsParser()</full_name>
      <docblock line="22">
        <description>Returns and instance of `OptionsParser`</description>
        <long-description></long-description>
        <tag name="package" line="22" description="Default"/>
        <tag name="param" line="22" description="&lt;p&gt;Existing options&lt;/p&gt;" type="array" variable="$options">
          <type>array</type>
        </tag>
        <tag name="param" line="22" description="&lt;p&gt;Default values&lt;/p&gt;" type="array|null" variable="$defaults">
          <type>array</type>
          <type>null</type>
        </tag>
        <tag name="return" line="22" description="" type="\MeTools\View\OptionsParser">
          <type>\MeTools\View\OptionsParser</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$options</name>
        <default>array()</default>
        <type>array</type>
      </argument>
      <argument line="0" by_reference="false">
        <name>$defaults</name>
        <default>array()</default>
        <type>array|null</type>
      </argument>
    </function>
  </file>
  <file path="Controller/Component/UploaderComponent.php" generated-path="Controller.Component.UploaderComponent.html" hash="1004871e2f55e0e11394e0791bdc1a5e" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Component">\Cake\Controller\Component</namespace-alias>
    <namespace-alias name="RuntimeException">\RuntimeException</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Controller\Component" line="21" package="Default">
      <extends>\Cake\Controller\Component</extends>
      <name>UploaderComponent</name>
      <full_name>\MeTools\Controller\Component\UploaderComponent</full_name>
      <docblock line="21">
        <description>A component to upload files</description>
        <long-description></long-description>
        <tag name="package" line="21" description="Default"/>
      </docblock>
      <property static="false" visibility="protected" namespace="MeTools\Controller\Component" line="27" package="Default">
        <name>$error</name>
        <full_name>\MeTools\Controller\Component\UploaderComponent::$error</full_name>
        <default></default>
        <docblock line="27">
          <description>Last error</description>
          <long-description></long-description>
          <tag name="var" line="27" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="MeTools\Controller\Component" line="33" package="Default">
        <name>$file</name>
        <full_name>\MeTools\Controller\Component\UploaderComponent::$file</full_name>
        <default></default>
        <docblock line="33">
          <description>Uploaded file information</description>
          <long-description></long-description>
          <tag name="var" line="33" description="" type="object" variable="">
            <type>object</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Controller\Component" line="41" package="Default">
        <name>setError</name>
        <full_name>\MeTools\Controller\Component\UploaderComponent::setError()</full_name>
        <docblock line="41">
          <description>Internal method to set an error</description>
          <long-description></long-description>
          <tag name="param" line="41" description="&lt;p&gt;Error&lt;/p&gt;" type="string" variable="$error">
            <type>string</type>
          </tag>
          <tag name="return" line="41" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="41" description="" link="\MeTools\Controller\Component\UploaderComponent::$error"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$error</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Controller\Component" line="51" package="Default">
        <name>findTargetFilename</name>
        <full_name>\MeTools\Controller\Component\UploaderComponent::findTargetFilename()</full_name>
        <docblock line="51">
          <description>Internal method to find the target filename</description>
          <long-description></long-description>
          <tag name="param" line="51" description="&lt;p&gt;Path&lt;/p&gt;" type="string" variable="$target">
            <type>string</type>
          </tag>
          <tag name="return" line="51" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$target</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Controller\Component" line="85" package="Default">
        <name>move_uploaded_file</name>
        <full_name>\MeTools\Controller\Component\UploaderComponent::move_uploaded_file()</full_name>
        <docblock line="85">
          <description>This allows you to override the `move_uploaded_file()` function, for
 example with the `rename()` function</description>
          <long-description></long-description>
          <tag name="param" line="85" description="&lt;p&gt;The filename of the uploaded file&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;The destination of the moved file&lt;/p&gt;" type="string" variable="$destination">
            <type>string</type>
          </tag>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$destination</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Controller\Component" line="95" package="Default">
        <name>getError</name>
        <full_name>\MeTools\Controller\Component\UploaderComponent::getError()</full_name>
        <docblock line="95">
          <description>Returns the first error</description>
          <long-description></long-description>
          <tag name="return" line="95" description="String or `false`" type="string|boolean">
            <type>string</type>
            <type>boolean</type>
          </tag>
          <tag name="uses" line="95" description="" link="\MeTools\Controller\Component\UploaderComponent::$error"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Controller\Component" line="109" package="Default">
        <name>mimetype</name>
        <full_name>\MeTools\Controller\Component\UploaderComponent::mimetype()</full_name>
        <docblock line="109">
          <description>Checks if the mimetype is correct</description>
          <long-description></long-description>
          <tag name="param" line="109" description="&lt;p&gt;Accepted mimetypes as string or&#10;array or a magic word (&lt;code&gt;images&lt;/code&gt; or &lt;code&gt;text&lt;/code&gt;)&lt;/p&gt;" type="string|array" variable="$acceptedMimetype">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="return" line="109" description="" type="\MeTools\Controller\Component\UploaderComponent">
            <type>\MeTools\Controller\Component\UploaderComponent</type>
          </tag>
          <tag name="throws" line="109" description="" type="\RuntimeException">
            <type>\RuntimeException</type>
          </tag>
          <tag name="uses" line="109" description="" link="\MeTools\Controller\Component\UploaderComponent::setError()"/>
          <tag name="uses" line="109" description="" link="\MeTools\Controller\Component\UploaderComponent::$file"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$acceptedMimetype</name>
          <default></default>
          <type>string|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Controller\Component" line="147" package="Default">
        <name>save</name>
        <full_name>\MeTools\Controller\Component\UploaderComponent::save()</full_name>
        <docblock line="147">
          <description>Saves the file</description>
          <long-description></long-description>
          <tag name="param" line="147" description="&lt;p&gt;Directory where you want to save the uploaded&#10; file&lt;/p&gt;" type="string" variable="$directory">
            <type>string</type>
          </tag>
          <tag name="param" line="147" description="&lt;p&gt;Optional filename. Otherwise, it will be&#10; generated automatically&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="147" description="Final full path of the uploaded file or `false` on&#10; failure" type="string|boolean">
            <type>string</type>
            <type>boolean</type>
          </tag>
          <tag name="throws" line="147" description="" type="\RuntimeException">
            <type>\RuntimeException</type>
          </tag>
          <tag name="uses" line="147" description="" link="\MeTools\Controller\Component\UploaderComponent::findTargetFilename()"/>
          <tag name="uses" line="147" description="" link="\MeTools\Controller\Component\UploaderComponent::getError()"/>
          <tag name="uses" line="147" description="" link="\MeTools\Controller\Component\UploaderComponent::setError()"/>
          <tag name="uses" line="147" description="" link="\MeTools\Controller\Component\UploaderComponent::move_uploaded_file()"/>
          <tag name="uses" line="147" description="" link="\MeTools\Controller\Component\UploaderComponent::$file"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$directory</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Controller\Component" line="179" package="Default">
        <name>set</name>
        <full_name>\MeTools\Controller\Component\UploaderComponent::set()</full_name>
        <docblock line="179">
          <description>Sets uploaded file information (`$_FILES` array, better as
 `$this-&gt;getRequest()-&gt;getData('file')`)</description>
          <long-description></long-description>
          <tag name="param" line="179" description="&lt;p&gt;Uploaded file information&lt;/p&gt;" type="array" variable="$file">
            <type>array</type>
          </tag>
          <tag name="return" line="179" description="" type="\MeTools\Controller\Component\UploaderComponent">
            <type>\MeTools\Controller\Component\UploaderComponent</type>
          </tag>
          <tag name="uses" line="179" description="" link="\MeTools\Controller\Component\UploaderComponent::setError()"/>
          <tag name="uses" line="179" description="" link="\MeTools\Controller\Component\UploaderComponent::$error"/>
          <tag name="uses" line="179" description="" link="\MeTools\Controller\Component\UploaderComponent::$file"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Command/Install/CreatePluginsLinksCommand.php" generated-path="Command.Install.CreatePluginsLinksCommand.html" hash="e674e829f217f294f1514fad159322a8" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.0"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Arguments">\Cake\Console\Arguments</namespace-alias>
    <namespace-alias name="ConsoleIo">\Cake\Console\ConsoleIo</namespace-alias>
    <namespace-alias name="ConsoleOptionParser">\Cake\Console\ConsoleOptionParser</namespace-alias>
    <namespace-alias name="Inflector">\Cake\Utility\Inflector</namespace-alias>
    <namespace-alias name="Command">\MeTools\Console\Command</namespace-alias>
    <namespace-alias name="Plugin">\MeTools\Core\Plugin</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Command\Install" line="26" package="Default">
      <extends>\MeTools\Console\Command</extends>
      <name>CreatePluginsLinksCommand</name>
      <full_name>\MeTools\Command\Install\CreatePluginsLinksCommand</full_name>
      <docblock line="26">
        <description>'Creates symbolic links for plugins assets'</description>
        <long-description></long-description>
        <tag name="package" line="26" description="Default"/>
        <tag name="inherited_from" description="\MeTools\Console\Command" refers="\MeTools\Console\Command" link="/classes/MeTools.Console.Command.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="33" package="Default">
        <name>buildOptionParser</name>
        <full_name>\MeTools\Command\Install\CreatePluginsLinksCommand::buildOptionParser()</full_name>
        <docblock line="33">
          <description>Hook method for defining this command's option parser</description>
          <long-description></long-description>
          <tag name="param" line="33" description="&lt;p&gt;The parser to be defined&lt;/p&gt;" type="\Cake\Console\ConsoleOptionParser" variable="$parser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
          <tag name="return" line="33" description="" type="\Cake\Console\ConsoleOptionParser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parser</name>
          <default></default>
          <type>\Cake\Console\ConsoleOptionParser</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="44" package="Default">
        <name>execute</name>
        <full_name>\MeTools\Command\Install\CreatePluginsLinksCommand::execute()</full_name>
        <docblock line="44">
          <description>Creates symbolic links for plugins assets</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;The command arguments&lt;/p&gt;" type="\Cake\Console\Arguments" variable="$args">
            <type>\Cake\Console\Arguments</type>
          </tag>
          <tag name="param" line="44" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="return" line="44" description="The exit code or null for success" type="null|integer">
            <type>null</type>
            <type>integer</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>\Cake\Console\Arguments</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="34" package="Default">
        <name>verboseIfFileExists</name>
        <full_name>\MeTools\Console\Command::verboseIfFileExists()</full_name>
        <docblock line="34">
          <description>Internal method to check if a file already exists and output a warning at
 the verbose level</description>
          <long-description></long-description>
          <tag name="param" line="34" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="34" description="&lt;p&gt;Path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="34" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="53" package="Default">
        <name>copyFile</name>
        <full_name>\MeTools\Console\Command::copyFile()</full_name>
        <docblock line="53">
          <description>Copies a file</description>
          <long-description></long-description>
          <tag name="param" line="53" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Source file&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Destination file&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="53" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="53" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="85" package="Default">
        <name>createDir</name>
        <full_name>\MeTools\Console\Command::createDir()</full_name>
        <docblock line="85">
          <description>Creates a directory.</description>
          <long-description>This method creates directories recursively.</long-description>
          <tag name="param" line="85" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;Directory path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::folderChmod()"/>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="111" package="Default">
        <name>createFile</name>
        <full_name>\MeTools\Console\Command::createFile()</full_name>
        <docblock line="111">
          <description>Creates a file at given path</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Where to put the file&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Content to put in the file&lt;/p&gt;" type="string" variable="$contents">
            <type>string</type>
          </tag>
          <tag name="return" line="111" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="111" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contents</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="123" package="Default">
        <name>createLink</name>
        <full_name>\MeTools\Console\Command::createLink()</full_name>
        <docblock line="123">
          <description>Creates a symbolic link</description>
          <long-description></long-description>
          <tag name="param" line="123" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Source file or directory&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Destination file or directory&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="154" package="Default">
        <name>folderChmod</name>
        <full_name>\MeTools\Console\Command::folderChmod()</full_name>
        <docblock line="154">
          <description>Sets folder chmods.</description>
          <long-description>This method applies permissions recursively.</long-description>
          <tag name="param" line="154" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Folder path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Chmod&lt;/p&gt;" type="integer" variable="$chmod">
            <type>integer</type>
          </tag>
          <tag name="return" line="154" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$chmod</name>
          <default>511</default>
          <type>integer</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
    </class>
  </file>
  <file path="View/Helper/BreadcrumbsHelper.php" generated-path="View.Helper.BreadcrumbsHelper.html" hash="4f610a23d61168cfab9dd27e3451dc72" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="see" line="0" description="BreadcrumbsHelper" link="https://api.cakephp.org/3.4/class-Cake.View.Helper.BreadcrumbsHelper.html"/>
      <tag name="see" line="0" description="Bootstrap documentation" link="http://getbootstrap.com/components/#breadcrumbs"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="CakeBreadcrumbsHelper">\Cake\View\Helper\BreadcrumbsHelper</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\View\Helper" line="22" package="Default">
      <extends>\Cake\View\Helper\BreadcrumbsHelper</extends>
      <name>BreadcrumbsHelper</name>
      <full_name>\MeTools\View\Helper\BreadcrumbsHelper</full_name>
      <docblock line="22">
        <description>Creates breadcrumbs, according to the Bootstrap component</description>
        <long-description></long-description>
        <tag name="package" line="22" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="44" package="Default">
        <name>add</name>
        <full_name>\MeTools\View\Helper\BreadcrumbsHelper::add()</full_name>
        <docblock line="44">
          <description>Add a crumb to the end of the trail</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;If provided as a string, it represents the&#10;title of the crumb. Alternatively you can provide an array, with each&#10;values being a single crumb. Arrays are expected to be of this form:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;title&lt;/em&gt; The title of the crumb&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;link&lt;/em&gt; The link of the crumb&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;options&lt;/em&gt; Options of the crumb&lt;/li&gt;&#10;&lt;/ul&gt;" type="string|array" variable="$title">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="param" line="44" description="&lt;p&gt;URL of the crumb. Either a string, an array&#10;of route params to pass to Url::build() or null/empty&lt;/p&gt;" type="string|array|null" variable="$url">
            <type>string</type>
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="44" description="&lt;p&gt;Array of options. These options will be used as&#10;attributes HTML attribute the crumb will be rendered in (a &lt;li&gt; tag by&#10;default). It accepts two special keys:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;innerAttrs&lt;/em&gt;: An array that allows you to define attributes for the&#10;inner element of the crumb (by default, to the link)&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;templateVars&lt;/em&gt;: Specific template vars in case you override the&#10;templates provided&lt;/li&gt;&#10;&lt;/ul&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="44" description="" type="\MeTools\View\Helper\BreadcrumbsHelper">
            <type>\MeTools\View\Helper\BreadcrumbsHelper</type>
          </tag>
          <tag name="since" line="44" description="2.16.0"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default></default>
          <type>string|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default>null</default>
          <type>string|array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="71" package="Default">
        <name>prepend</name>
        <full_name>\MeTools\View\Helper\BreadcrumbsHelper::prepend()</full_name>
        <docblock line="71">
          <description>Prepend a crumb to the start of the queue</description>
          <long-description></long-description>
          <tag name="param" line="71" description="&lt;p&gt;If provided as a string, it represents the&#10;title of the crumb. Alternatively you can provide an array, with each&#10;values being a single crumb. Arrays are expected to be of this form:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;title&lt;/em&gt; The title of the crumb&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;link&lt;/em&gt; The link of the crumb&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;options&lt;/em&gt; Options of the crumb&lt;/li&gt;&#10;&lt;/ul&gt;" type="string|array" variable="$title">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="param" line="71" description="&lt;p&gt;URL of the crumb. Either a string, an array&#10;of route params to pass to Url::build() or null/empty&lt;/p&gt;" type="string|array|null" variable="$url">
            <type>string</type>
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="71" description="&lt;p&gt;Array of options. These options will be used as&#10;attributes HTML attribute the crumb will be rendered in (a &lt;li&gt; tag by&#10;default). It accepts two special keys:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;innerAttrs&lt;/em&gt;: An array that allows you to define attributes for the&#10;inner element of the crumb (by default, to the link)&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;templateVars&lt;/em&gt;: Specific template vars in case you override the&#10;templates provided&lt;/li&gt;&#10;&lt;/ul&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="71" description="" type="\MeTools\View\Helper\BreadcrumbsHelper">
            <type>\MeTools\View\Helper\BreadcrumbsHelper</type>
          </tag>
          <tag name="since" line="71" description="2.16.0"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default></default>
          <type>string|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default>null</default>
          <type>string|array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="85" package="Default">
        <name>render</name>
        <full_name>\MeTools\View\Helper\BreadcrumbsHelper::render()</full_name>
        <docblock line="85">
          <description>Renders the breadcrumbs trail</description>
          <long-description></long-description>
          <tag name="param" line="85" description="&lt;p&gt;Array of attributes applied to the &lt;code&gt;wrapper&lt;/code&gt;&#10;template&lt;/p&gt;" type="array" variable="$attributes">
            <type>array</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;Array of attributes for the &lt;code&gt;separator&lt;/code&gt; template&lt;/p&gt;" type="array" variable="$separator">
            <type>array</type>
          </tag>
          <tag name="return" line="85" description="The breadcrumbs trail" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$attributes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$separator</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="View/Helper/BBCodeHelper.php" generated-path="View.Helper.BBCodeHelper.html" hash="f05ac4caed0580fc1777f5418292192e" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="see" line="0" description="" link="\MeTools\Utility\BBCode"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Helper">\Cake\View\Helper</namespace-alias>
    <namespace-alias name="BBCode">\MeTools\Utility\BBCode</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\View\Helper" line="26" package="Default">
      <extends>\Cake\View\Helper</extends>
      <name>BBCodeHelper</name>
      <full_name>\MeTools\View\Helper\BBCodeHelper</full_name>
      <docblock line="26">
        <description>BBCode Helper.</description>
        <long-description>This helper allows you to handle some BBCode.
The `parser()` method executes all parsers.</long-description>
        <tag name="deprecated" line="26" description="2.18.14"/>
        <tag name="package" line="26" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="MeTools\View\Helper" line="32" package="Default">
        <name>$helpers</name>
        <full_name>\MeTools\View\Helper\BBCodeHelper::$helpers</full_name>
        <default>array('Html' =&gt; array('className' =&gt; 'MeTools.Html'))</default>
        <docblock line="32">
          <description>Helpers</description>
          <long-description></long-description>
          <tag name="var" line="32" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="MeTools\View\Helper" line="38" package="Default">
        <name>$BBCode</name>
        <full_name>\MeTools\View\Helper\BBCodeHelper::$BBCode</full_name>
        <default></default>
        <docblock line="38">
          <description>A `BBCode` instance</description>
          <long-description></long-description>
          <tag name="var" line="38" description="" type="\MeTools\Utility\BBCode" variable="">
            <type>\MeTools\Utility\BBCode</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="47" package="Default">
        <name>__call</name>
        <full_name>\MeTools\View\Helper\BBCodeHelper::__call()</full_name>
        <docblock line="47">
          <description>Calls methods provided by the `BBCode` utility</description>
          <long-description></long-description>
          <tag name="param" line="47" description="&lt;p&gt;Method to invoke&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="47" description="&lt;p&gt;Array of params for the method&lt;/p&gt;" type="array" variable="$params">
            <type>array</type>
          </tag>
          <tag name="return" line="47" description="" type="mixed|void">
            <type>mixed</type>
            <type>void</type>
          </tag>
          <tag name="uses" line="47" description="" link="\MeTools\Utility\BBCode"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$params</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="View/Widget/HiddenWidget.php" generated-path="View.Widget.HiddenWidget.html" hash="d86b09d9a8da088aceb948b80ab6356d" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="ContextInterface">\Cake\View\Form\ContextInterface</namespace-alias>
    <namespace-alias name="BasicWidget">\Cake\View\Widget\BasicWidget</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\View\Widget" line="21" package="Default">
      <extends>\Cake\View\Widget\BasicWidget</extends>
      <name>HiddenWidget</name>
      <full_name>\MeTools\View\Widget\HiddenWidget</full_name>
      <docblock line="21">
        <description>Hidden input class</description>
        <long-description></long-description>
        <tag name="package" line="21" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Widget" line="29" package="Default">
        <name>render</name>
        <full_name>\MeTools\View\Widget\HiddenWidget::render()</full_name>
        <docblock line="29">
          <description>Render a hidden widget</description>
          <long-description></long-description>
          <tag name="param" line="29" description="&lt;p&gt;The data to build an input with&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="29" description="&lt;p&gt;The current form context&lt;/p&gt;" type="\Cake\View\Form\ContextInterface" variable="$context">
            <type>\Cake\View\Form\ContextInterface</type>
          </tag>
          <tag name="return" line="29" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$context</name>
          <default></default>
          <type>\Cake\View\Form\ContextInterface</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="TestSuite/TestCase.php" generated-path="TestSuite.TestCase.html" hash="542898188434fcf0aa349a22ff903db0" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.14.0"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Configure">\Cake\Core\Configure</namespace-alias>
    <namespace-alias name="TableRegistry">\Cake\ORM\TableRegistry</namespace-alias>
    <namespace-alias name="CakeTestCase">\Cake\TestSuite\TestCase</namespace-alias>
    <namespace-alias name="Exception">\Exception</namespace-alias>
    <namespace-alias name="MockTrait">\MeTools\TestSuite\MockTrait</namespace-alias>
    <namespace-alias name="Filesystem">\Symfony\Component\Filesystem\Filesystem</namespace-alias>
    <namespace-alias name="ReflectionTrait">\Tools\ReflectionTrait</namespace-alias>
    <namespace-alias name="TestTrait">\Tools\TestSuite\TestTrait</namespace-alias>
    <class final="false" abstract="true" namespace="MeTools\TestSuite" line="28" package="Default">
      <extends>\Cake\TestSuite\TestCase</extends>
      <name>TestCase</name>
      <full_name>\MeTools\TestSuite\TestCase</full_name>
      <docblock line="28">
        <description>TestCase class</description>
        <long-description></long-description>
        <tag name="package" line="28" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="38" package="Default">
        <name>setUp</name>
        <full_name>\MeTools\TestSuite\TestCase::setUp()</full_name>
        <docblock line="38">
          <description>Called before every test method</description>
          <long-description></long-description>
          <tag name="return" line="38" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="49" package="Default">
        <name>tearDown</name>
        <full_name>\MeTools\TestSuite\TestCase::tearDown()</full_name>
        <docblock line="49">
          <description>Called after every test method</description>
          <long-description></long-description>
          <tag name="return" line="49" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="70" package="Default">
        <name>getLogFullPath</name>
        <full_name>\MeTools\TestSuite\TestCase::getLogFullPath()</full_name>
        <docblock line="70">
          <description>Internal method to get a log full path</description>
          <long-description></long-description>
          <tag name="param" line="70" description="&lt;p&gt;Log filename&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="70" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="since" line="70" description="2.16.10"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="86" package="Default">
        <name>getTable</name>
        <full_name>\MeTools\TestSuite\TestCase::getTable()</full_name>
        <docblock line="86">
          <description>Get a table instance from the registry</description>
          <long-description></long-description>
          <tag name="param" line="86" description="&lt;p&gt;The alias name you want to get&lt;/p&gt;" type="string" variable="$alias">
            <type>string</type>
          </tag>
          <tag name="param" line="86" description="&lt;p&gt;The options you want to build the table with&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="86" description="" type="\Cake\ORM\Table|null">
            <type>\Cake\ORM\Table</type>
            <type>null</type>
          </tag>
          <tag name="since" line="86" description="2.18.11"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$alias</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="106" package="Default">
        <name>assertLogContains</name>
        <full_name>\MeTools\TestSuite\TestCase::assertLogContains()</full_name>
        <docblock line="106">
          <description>Asserts log file contents</description>
          <long-description></long-description>
          <tag name="param" line="106" description="&lt;p&gt;The expected contents&lt;/p&gt;" type="string" variable="$expectedContent">
            <type>string</type>
          </tag>
          <tag name="param" line="106" description="&lt;p&gt;Log filename&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="param" line="106" description="&lt;p&gt;The failure message that will be appended to the&#10; generated message&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="return" line="106" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="106" description="" link="\MeTools\TestSuite\TestCase::getLogFullPath()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expectedContent</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="126" package="Default">
        <name>deleteLog</name>
        <full_name>\MeTools\TestSuite\TestCase::deleteLog()</full_name>
        <docblock line="126">
          <description>Deletes a log file</description>
          <long-description></long-description>
          <tag name="param" line="126" description="&lt;p&gt;Log filename&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="126" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="126" description="" link="\MeTools\TestSuite\TestCase::getLogFullPath()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="31" package="Default">
        <name>getControllerAlias</name>
        <full_name>\MeTools\TestSuite\MockTrait::getControllerAlias()</full_name>
        <docblock line="31">
          <description>Gets the alias for a controller</description>
          <long-description></long-description>
          <tag name="param" line="31" description="&lt;p&gt;Controller class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="return" line="31" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="31" description="" type="\ReflectionException">
            <type>\ReflectionException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="42" package="Default">
        <name>getMockForComponent</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForComponent()</full_name>
        <docblock line="42">
          <description>Mocks a component</description>
          <long-description></long-description>
          <tag name="param" line="42" description="&lt;p&gt;Component class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="42" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="return" line="42" description="" type="\Cake\Controller\Component|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\Controller\Component</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="58" package="Default">
        <name>getMockForController</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForController()</full_name>
        <docblock line="58">
          <description>Mocks a controller</description>
          <long-description></long-description>
          <tag name="param" line="58" description="&lt;p&gt;Controller class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;Controller alias&lt;/p&gt;" type="string" variable="$alias">
            <type>string</type>
          </tag>
          <tag name="return" line="58" description="" type="\Cake\Controller\Controller|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\Controller\Controller</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
          <tag name="uses" line="58" description="" link="\MeTools\TestSuite\MockTrait::getControllerAlias()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$alias</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="75" package="Default">
        <name>getMockForHelper</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForHelper()</full_name>
        <docblock line="75">
          <description>Mocks an helper</description>
          <long-description></long-description>
          <tag name="param" line="75" description="&lt;p&gt;Helper class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="75" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="return" line="75" description="" type="\Cake\View\Helper|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\View\Helper</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="93" package="Default">
        <name>getOriginClassName</name>
        <full_name>\MeTools\TestSuite\MockTrait::getOriginClassName()</full_name>
        <docblock line="93">
          <description>Gets the classname for which a test is being performed, starting from the
 test class name.</description>
          <long-description>Example: class `MyPlugin\Test\TestCase\Controller\PagesControllerTest`
 will return the string `MyPlugin\Controller\PagesController`.</long-description>
          <tag name="param" line="93" description="&lt;p&gt;A test class as object or string&lt;/p&gt;" type="object|string" variable="$testClass">
            <type>object</type>
            <type>string</type>
          </tag>
          <tag name="return" line="93" description="The class name for which a test is being performed" type="string">
            <type>string</type>
          </tag>
          <tag name="since" line="93" description="2.18.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$testClass</name>
          <default></default>
          <type>object|string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
    </class>
  </file>
  <file path="Command/Install/CreateRobotsCommand.php" generated-path="Command.Install.CreateRobotsCommand.html" hash="4346d59037b9e513447142f4c31e4462" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.0"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Arguments">\Cake\Console\Arguments</namespace-alias>
    <namespace-alias name="ConsoleIo">\Cake\Console\ConsoleIo</namespace-alias>
    <namespace-alias name="ConsoleOptionParser">\Cake\Console\ConsoleOptionParser</namespace-alias>
    <namespace-alias name="Command">\MeTools\Console\Command</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Command\Install" line="24" package="Default">
      <extends>\MeTools\Console\Command</extends>
      <name>CreateRobotsCommand</name>
      <full_name>\MeTools\Command\Install\CreateRobotsCommand</full_name>
      <docblock line="24">
        <description>Creates the `robots.txt` file</description>
        <long-description></long-description>
        <tag name="package" line="24" description="Default"/>
        <tag name="inherited_from" description="\MeTools\Console\Command" refers="\MeTools\Console\Command" link="/classes/MeTools.Console.Command.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="31" package="Default">
        <name>buildOptionParser</name>
        <full_name>\MeTools\Command\Install\CreateRobotsCommand::buildOptionParser()</full_name>
        <docblock line="31">
          <description>Hook method for defining this command's option parser</description>
          <long-description></long-description>
          <tag name="param" line="31" description="&lt;p&gt;The parser to be defined&lt;/p&gt;" type="\Cake\Console\ConsoleOptionParser" variable="$parser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
          <tag name="return" line="31" description="" type="\Cake\Console\ConsoleOptionParser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parser</name>
          <default></default>
          <type>\Cake\Console\ConsoleOptionParser</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="43" package="Default">
        <name>execute</name>
        <full_name>\MeTools\Command\Install\CreateRobotsCommand::execute()</full_name>
        <docblock line="43">
          <description>Creates the `robots.txt` file</description>
          <long-description></long-description>
          <tag name="param" line="43" description="&lt;p&gt;The command arguments&lt;/p&gt;" type="\Cake\Console\Arguments" variable="$args">
            <type>\Cake\Console\Arguments</type>
          </tag>
          <tag name="param" line="43" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="return" line="43" description="The exit code or null for success" type="null|integer">
            <type>null</type>
            <type>integer</type>
          </tag>
          <tag name="uses" line="43" description="" link="\MeTools\Console\Command::createFile()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>\Cake\Console\Arguments</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="34" package="Default">
        <name>verboseIfFileExists</name>
        <full_name>\MeTools\Console\Command::verboseIfFileExists()</full_name>
        <docblock line="34">
          <description>Internal method to check if a file already exists and output a warning at
 the verbose level</description>
          <long-description></long-description>
          <tag name="param" line="34" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="34" description="&lt;p&gt;Path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="34" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="53" package="Default">
        <name>copyFile</name>
        <full_name>\MeTools\Console\Command::copyFile()</full_name>
        <docblock line="53">
          <description>Copies a file</description>
          <long-description></long-description>
          <tag name="param" line="53" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Source file&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Destination file&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="53" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="53" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="85" package="Default">
        <name>createDir</name>
        <full_name>\MeTools\Console\Command::createDir()</full_name>
        <docblock line="85">
          <description>Creates a directory.</description>
          <long-description>This method creates directories recursively.</long-description>
          <tag name="param" line="85" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;Directory path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::folderChmod()"/>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="111" package="Default">
        <name>createFile</name>
        <full_name>\MeTools\Console\Command::createFile()</full_name>
        <docblock line="111">
          <description>Creates a file at given path</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Where to put the file&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Content to put in the file&lt;/p&gt;" type="string" variable="$contents">
            <type>string</type>
          </tag>
          <tag name="return" line="111" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="111" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contents</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="123" package="Default">
        <name>createLink</name>
        <full_name>\MeTools\Console\Command::createLink()</full_name>
        <docblock line="123">
          <description>Creates a symbolic link</description>
          <long-description></long-description>
          <tag name="param" line="123" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Source file or directory&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Destination file or directory&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="154" package="Default">
        <name>folderChmod</name>
        <full_name>\MeTools\Console\Command::folderChmod()</full_name>
        <docblock line="154">
          <description>Sets folder chmods.</description>
          <long-description>This method applies permissions recursively.</long-description>
          <tag name="param" line="154" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Folder path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Chmod&lt;/p&gt;" type="integer" variable="$chmod">
            <type>integer</type>
          </tag>
          <tag name="return" line="154" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$chmod</name>
          <default>511</default>
          <type>integer</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
    </class>
  </file>
  <file path="TestSuite/IntegrationTestTrait.php" generated-path="TestSuite.IntegrationTestTrait.html" hash="32c6354db291f962350e05fb41bd098b" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.0"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="SessionEquals">\Cake\TestSuite\Constraint\Session\SessionEquals</namespace-alias>
    <namespace-alias name="CakeIntegrationTestTrait">\Cake\TestSuite\IntegrationTestTrait</namespace-alias>
    <namespace-alias name="UploaderComponent">\MeTools\Controller\Component\UploaderComponent</namespace-alias>
    <trait namespace="MeTools\TestSuite" line="23" package="Default">
      <name>IntegrationTestTrait</name>
      <full_name>\MeTools\TestSuite\IntegrationTestTrait</full_name>
      <docblock line="23">
        <description>A trait intended to make integration tests of your controllers easier</description>
        <long-description></long-description>
        <tag name="package" line="23" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="35" package="Default">
        <name>controllerSpy</name>
        <full_name>\MeTools\TestSuite\IntegrationTestTrait::controllerSpy()</full_name>
        <docblock line="35">
          <description>Adds additional event spies to the controller/view event manager</description>
          <long-description></long-description>
          <tag name="param" line="35" description="&lt;p&gt;A dispatcher event&lt;/p&gt;" type="\Cake\Event\Event" variable="$event">
            <type>\Cake\Event\Event</type>
          </tag>
          <tag name="param" line="35" description="&lt;p&gt;Controller instance&lt;/p&gt;" type="\Cake\Controller\Controller|null" variable="$controller">
            <type>\Cake\Controller\Controller</type>
            <type>null</type>
          </tag>
          <tag name="return" line="35" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>\Cake\Event\Event</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$controller</name>
          <default>null</default>
          <type>\Cake\Controller\Controller|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="64" package="Default">
        <name>assertCookieIsEmpty</name>
        <full_name>\MeTools\TestSuite\IntegrationTestTrait::assertCookieIsEmpty()</full_name>
        <docblock line="64">
          <description>Asserts that a cookie is empty</description>
          <long-description></long-description>
          <tag name="param" line="64" description="&lt;p&gt;The cookie name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="64" description="&lt;p&gt;The failure message that will be appended to the&#10; generated message&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="return" line="64" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="79" package="Default">
        <name>assertFlashMessage</name>
        <full_name>\MeTools\TestSuite\IntegrationTestTrait::assertFlashMessage()</full_name>
        <docblock line="79">
          <description>Asserts flash message contents</description>
          <long-description></long-description>
          <tag name="param" line="79" description="&lt;p&gt;The expected contents&lt;/p&gt;" type="string" variable="$expected">
            <type>string</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;Flash message key&lt;/p&gt;" type="integer" variable="$key">
            <type>integer</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;The failure message that will be appended to the&#10; generated message&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="return" line="79" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expected</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="91" package="Default">
        <name>assertResponseOkAndNotEmpty</name>
        <full_name>\MeTools\TestSuite\IntegrationTestTrait::assertResponseOkAndNotEmpty()</full_name>
        <docblock line="91">
          <description>Asserts that the response status code is in the 2xx range and the
 response content is not empty.</description>
          <long-description></long-description>
          <tag name="param" line="91" description="&lt;p&gt;The failure message that will be appended to the&#10; generated message&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="return" line="91" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="103" package="Default">
        <name>assertSessionEmpty</name>
        <full_name>\MeTools\TestSuite\IntegrationTestTrait::assertSessionEmpty()</full_name>
        <docblock line="103">
          <description>Asserts session is empty</description>
          <long-description></long-description>
          <tag name="param" line="103" description="&lt;p&gt;The session data path. Uses Hash::get() compatible notation&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="103" description="&lt;p&gt;The failure message that will be appended to the generated message&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="return" line="103" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="since" line="103" description="2.18.9"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
    </trait>
  </file>
  <file path="TestSuite/HelperTestCase.php" generated-path="TestSuite.HelperTestCase.html" hash="74f37a86846288556c33e7dd71fe9181" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.17.5"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="TestCase">\MeTools\TestSuite\TestCase</namespace-alias>
    <class final="false" abstract="true" namespace="MeTools\TestSuite" line="21" package="Default">
      <extends>\MeTools\TestSuite\TestCase</extends>
      <name>HelperTestCase</name>
      <full_name>\MeTools\TestSuite\HelperTestCase</full_name>
      <docblock line="21">
        <description>Abstract class for test helpers</description>
        <long-description></long-description>
        <tag name="package" line="21" description="Default"/>
        <tag name="inherited_from" description="\MeTools\TestSuite\TestCase" refers="\MeTools\TestSuite\TestCase" link="/classes/MeTools.TestSuite.TestCase.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="MeTools\TestSuite" line="27" package="Default">
        <name>$Helper</name>
        <full_name>\MeTools\TestSuite\HelperTestCase::$Helper</full_name>
        <default></default>
        <docblock line="27">
          <description>Helper instance</description>
          <long-description></long-description>
          <tag name="var" line="27" description="" type="\Cake\View\Helper|\PHPUnit_Framework_MockObject_MockObject" variable="">
            <type>\Cake\View\Helper</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="MeTools\TestSuite" line="33" package="Default">
        <name>$autoInitializeClass</name>
        <full_name>\MeTools\TestSuite\HelperTestCase::$autoInitializeClass</full_name>
        <default>true</default>
        <docblock line="33">
          <description>If `true`, a mock instance of the helper will be created</description>
          <long-description></long-description>
          <tag name="var" line="33" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="41" package="Default">
        <name>setUp</name>
        <full_name>\MeTools\TestSuite\HelperTestCase::setUp()</full_name>
        <docblock line="41">
          <description>Called before every test method</description>
          <long-description></long-description>
          <tag name="return" line="41" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="41" description="" link="\MeTools\TestSuite\HelperTestCase::$Helper"/>
          <tag name="uses" line="41" description="" link="\MeTools\TestSuite\HelperTestCase::$autoInitializeClass"/>
          <tag name="inherited_from" description="\MeTools\TestSuite\TestCase::setUp()" refers="\MeTools\TestSuite\TestCase::setUp()" link="/classes/MeTools.TestSuite.TestCase.html#method_setUp"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="38" package="Default">
        <name>setUp</name>
        <full_name>\MeTools\TestSuite\TestCase::setUp()</full_name>
        <docblock line="38">
          <description>Called before every test method</description>
          <long-description></long-description>
          <tag name="return" line="38" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="49" package="Default">
        <name>tearDown</name>
        <full_name>\MeTools\TestSuite\TestCase::tearDown()</full_name>
        <docblock line="49">
          <description>Called after every test method</description>
          <long-description></long-description>
          <tag name="return" line="49" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="70" package="Default">
        <name>getLogFullPath</name>
        <full_name>\MeTools\TestSuite\TestCase::getLogFullPath()</full_name>
        <docblock line="70">
          <description>Internal method to get a log full path</description>
          <long-description></long-description>
          <tag name="param" line="70" description="&lt;p&gt;Log filename&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="70" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="since" line="70" description="2.16.10"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="86" package="Default">
        <name>getTable</name>
        <full_name>\MeTools\TestSuite\TestCase::getTable()</full_name>
        <docblock line="86">
          <description>Get a table instance from the registry</description>
          <long-description></long-description>
          <tag name="param" line="86" description="&lt;p&gt;The alias name you want to get&lt;/p&gt;" type="string" variable="$alias">
            <type>string</type>
          </tag>
          <tag name="param" line="86" description="&lt;p&gt;The options you want to build the table with&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="86" description="" type="\Cake\ORM\Table|null">
            <type>\Cake\ORM\Table</type>
            <type>null</type>
          </tag>
          <tag name="since" line="86" description="2.18.11"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$alias</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="106" package="Default">
        <name>assertLogContains</name>
        <full_name>\MeTools\TestSuite\TestCase::assertLogContains()</full_name>
        <docblock line="106">
          <description>Asserts log file contents</description>
          <long-description></long-description>
          <tag name="param" line="106" description="&lt;p&gt;The expected contents&lt;/p&gt;" type="string" variable="$expectedContent">
            <type>string</type>
          </tag>
          <tag name="param" line="106" description="&lt;p&gt;Log filename&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="param" line="106" description="&lt;p&gt;The failure message that will be appended to the&#10; generated message&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="return" line="106" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="106" description="" link="\MeTools\TestSuite\TestCase::getLogFullPath()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expectedContent</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="126" package="Default">
        <name>deleteLog</name>
        <full_name>\MeTools\TestSuite\TestCase::deleteLog()</full_name>
        <docblock line="126">
          <description>Deletes a log file</description>
          <long-description></long-description>
          <tag name="param" line="126" description="&lt;p&gt;Log filename&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="126" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="126" description="" link="\MeTools\TestSuite\TestCase::getLogFullPath()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="31" package="Default">
        <name>getControllerAlias</name>
        <full_name>\MeTools\TestSuite\MockTrait::getControllerAlias()</full_name>
        <docblock line="31">
          <description>Gets the alias for a controller</description>
          <long-description></long-description>
          <tag name="param" line="31" description="&lt;p&gt;Controller class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="return" line="31" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="31" description="" type="\ReflectionException">
            <type>\ReflectionException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="42" package="Default">
        <name>getMockForComponent</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForComponent()</full_name>
        <docblock line="42">
          <description>Mocks a component</description>
          <long-description></long-description>
          <tag name="param" line="42" description="&lt;p&gt;Component class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="42" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="return" line="42" description="" type="\Cake\Controller\Component|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\Controller\Component</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="58" package="Default">
        <name>getMockForController</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForController()</full_name>
        <docblock line="58">
          <description>Mocks a controller</description>
          <long-description></long-description>
          <tag name="param" line="58" description="&lt;p&gt;Controller class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;Controller alias&lt;/p&gt;" type="string" variable="$alias">
            <type>string</type>
          </tag>
          <tag name="return" line="58" description="" type="\Cake\Controller\Controller|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\Controller\Controller</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
          <tag name="uses" line="58" description="" link="\MeTools\TestSuite\MockTrait::getControllerAlias()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$alias</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="75" package="Default">
        <name>getMockForHelper</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForHelper()</full_name>
        <docblock line="75">
          <description>Mocks an helper</description>
          <long-description></long-description>
          <tag name="param" line="75" description="&lt;p&gt;Helper class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="75" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="return" line="75" description="" type="\Cake\View\Helper|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\View\Helper</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="93" package="Default">
        <name>getOriginClassName</name>
        <full_name>\MeTools\TestSuite\MockTrait::getOriginClassName()</full_name>
        <docblock line="93">
          <description>Gets the classname for which a test is being performed, starting from the
 test class name.</description>
          <long-description>Example: class `MyPlugin\Test\TestCase\Controller\PagesControllerTest`
 will return the string `MyPlugin\Controller\PagesController`.</long-description>
          <tag name="param" line="93" description="&lt;p&gt;A test class as object or string&lt;/p&gt;" type="object|string" variable="$testClass">
            <type>object</type>
            <type>string</type>
          </tag>
          <tag name="return" line="93" description="The class name for which a test is being performed" type="string">
            <type>string</type>
          </tag>
          <tag name="since" line="93" description="2.18.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$testClass</name>
          <default></default>
          <type>object|string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
    </class>
  </file>
  <file path="View/Helper/DropdownHelper.php" generated-path="View.Helper.DropdownHelper.html" hash="4367c9cac0f111320d76f1c7571e50bd" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="see" line="0" description="" link="https://getbootstrap.com/docs/4.0/components/dropdowns"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Helper">\Cake\View\Helper</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\View\Helper" line="58" package="Default">
      <extends>\Cake\View\Helper</extends>
      <name>DropdownHelper</name>
      <full_name>\MeTools\View\Helper\DropdownHelper</full_name>
      <docblock line="58">
        <description>Provides functionalities for creating dropdown menus, according to Bootstrap.</description>
        <long-description>Dropdowns are built on a third party library, Popper.js, which provides
 dynamic positioning and viewport detection. Be sure to include popper.min.js
 before Bootstrap’s JavaScript.

Example:
&lt;code&gt;
$this-&gt;Dropdown-&gt;start('My dropdown');
echo $this-&gt;Html-&gt;link('First link', '/first', ['class' =&gt; 'dropdown-item']);
echo $this-&gt;Html-&gt;link('Second link', '/second', ['class' =&gt; 'dropdown-item']);
echo $this-&gt;Dropdown-&gt;end();
&lt;/code&gt;

Or using the `menu()` method:
&lt;code&gt;
echo $this-&gt;Dropdown-&gt;menu('My dropdown', [
     $this-&gt;Html-&gt;link('First link', '/first', ['class' =&gt; 'dropdown-item']),
     $this-&gt;Html-&gt;link('Second link', '/second', ['class' =&gt; 'dropdown-item']),
]);
&lt;/code&gt;

You can also use it as a callback.
For example, this creates a dropdown menu as an element of a list:
&lt;code&gt;
$this-&gt;Html-&gt;ul([
     $this-&gt;Html-&gt;link('Home', '/'),
     //This is the dropdown menu
     call_user_func(function() {
         $this-&gt;Dropdown-&gt;start('My dropdown');
         echo $this-&gt;Html-&gt;link('First link', '/first', ['class' =&gt; 'dropdown-item']);
         echo $this-&gt;Html-&gt;link('Second link', '/second', ['class' =&gt; 'dropdown-item']);

         return $this-&gt;Dropdown-&gt;end();
     }),
     $this-&gt;Html-&gt;link('Other main link', '#'),
]);
&lt;/code&gt;</long-description>
        <tag name="package" line="58" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="MeTools\View\Helper" line="64" package="Default">
        <name>$helpers</name>
        <full_name>\MeTools\View\Helper\DropdownHelper::$helpers</full_name>
        <default>array('Html' =&gt; array('className' =&gt; 'MeTools.Html'))</default>
        <docblock line="64">
          <description>Helpers</description>
          <long-description></long-description>
          <tag name="var" line="64" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="MeTools\View\Helper" line="70" package="Default">
        <name>$_start</name>
        <full_name>\MeTools\View\Helper\DropdownHelper::$_start</full_name>
        <default></default>
        <docblock line="70">
          <description>Start link. This link allows the opening of the dropdown menu</description>
          <long-description></long-description>
          <tag name="var" line="70" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="84" package="Default">
        <name>menu</name>
        <full_name>\MeTools\View\Helper\DropdownHelper::menu()</full_name>
        <docblock line="84">
          <description>Wrap method about `start()` and `end()` methods, which are called
 consecutively</description>
          <long-description></long-description>
          <tag name="param" line="84" description="&lt;p&gt;Title for the opening link&lt;/p&gt;" type="string" variable="$title">
            <type>string</type>
          </tag>
          <tag name="param" line="84" description="&lt;p&gt;Content for the dropdown menu, for example an array&#10; of links&lt;/p&gt;" type="array" variable="$menu">
            <type>array</type>
          </tag>
          <tag name="param" line="84" description="&lt;p&gt;HTML attributes and options for the opening&#10; link&lt;/p&gt;" type="array" variable="$titleOptions">
            <type>array</type>
          </tag>
          <tag name="param" line="84" description="&lt;p&gt;HTML attributes and options for the wrapper&#10; element&lt;/p&gt;" type="array" variable="$divOptions">
            <type>array</type>
          </tag>
          <tag name="return" line="84" description="" type="string|void">
            <type>string</type>
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$menu</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$titleOptions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$divOptions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="107" package="Default">
        <name>start</name>
        <full_name>\MeTools\View\Helper\DropdownHelper::start()</full_name>
        <docblock line="107">
          <description>Starts a dropdown. It captures links for the dropdown menu output until
 `DropdownHelper::end()` is called.</description>
          <long-description>Arguments and options regarding the link that allows the opening of the
 dropdown menu.</long-description>
          <tag name="param" line="107" description="&lt;p&gt;Title for the opening link&lt;/p&gt;" type="string" variable="$title">
            <type>string</type>
          </tag>
          <tag name="param" line="107" description="&lt;p&gt;HTML attributes and options for the opening&#10; link&lt;/p&gt;" type="array" variable="$titleOptions">
            <type>array</type>
          </tag>
          <tag name="return" line="107" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="107" description="" link="\MeTools\View\Helper\DropdownHelper::$_start"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$titleOptions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="126" package="Default">
        <name>end</name>
        <full_name>\MeTools\View\Helper\DropdownHelper::end()</full_name>
        <docblock line="126">
          <description>End a buffered section of dropdown menu capturing.</description>
          <long-description>Arguments and options regarding the list of the dropdown menu.</long-description>
          <tag name="param" line="126" description="&lt;p&gt;HTML attributes and options for the wrapper&#10; element&lt;/p&gt;" type="array" variable="$divOptions">
            <type>array</type>
          </tag>
          <tag name="return" line="126" description="" type="string|void">
            <type>string</type>
            <type>void</type>
          </tag>
          <tag name="uses" line="126" description="" link="\MeTools\View\Helper\DropdownHelper::$_start"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$divOptions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="View/Helper/PaginatorHelper.php" generated-path="View.Helper.PaginatorHelper.html" hash="1115b3a5f1bc66548c9999ee43b1a76c" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="see" line="0" description="PaginatorHelper" link="http://api.cakephp.org/3.4/class-Cake.View.Helper.PaginatorHelper.html"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Hash">\Cake\Utility\Hash</namespace-alias>
    <namespace-alias name="CakePaginatorHelper">\Cake\View\Helper\PaginatorHelper</namespace-alias>
    <namespace-alias name="View">\Cake\View\View</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\View\Helper" line="23" package="Default">
      <extends>\Cake\View\Helper\PaginatorHelper</extends>
      <name>PaginatorHelper</name>
      <full_name>\MeTools\View\Helper\PaginatorHelper</full_name>
      <docblock line="23">
        <description>Provides functionalities to the generation of pagers</description>
        <long-description></long-description>
        <tag name="package" line="23" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="MeTools\View\Helper" line="29" package="Default">
        <name>$helpers</name>
        <full_name>\MeTools\View\Helper\PaginatorHelper::$helpers</full_name>
        <default>array('Form' =&gt; array('className' =&gt; 'MeTools.Form'), 'Html' =&gt; array('className' =&gt; 'MeTools.Html'), 'MeTools.Icon', 'Number', 'Url')</default>
        <docblock line="29">
          <description>Helpers</description>
          <long-description></long-description>
          <tag name="var" line="29" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="46" package="Default">
        <name>__construct</name>
        <full_name>\MeTools\View\Helper\PaginatorHelper::__construct()</full_name>
        <docblock line="46">
          <description>Construct the widgets and binds the default context providers.</description>
          <long-description>This method only rewrites the default templates config.</long-description>
          <tag name="param" line="46" description="&lt;p&gt;The View this helper is being attached to&lt;/p&gt;" type="\MeTools\View\Helper\Cake\View\View" variable="$View">
            <type>\MeTools\View\Helper\Cake\View\View</type>
          </tag>
          <tag name="param" line="46" description="&lt;p&gt;Configuration settings for the helper&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="46" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="46" description="" link="\MeTools\View\Helper\$_defaultConfig"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$View</name>
          <default></default>
          <type>\MeTools\View\Helper\Cake\View\View</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="69" package="Default">
        <name>next</name>
        <full_name>\MeTools\View\Helper\PaginatorHelper::next()</full_name>
        <docblock line="69">
          <description>Generates a "next" link for a set of paged records</description>
          <long-description></long-description>
          <tag name="param" line="69" description="&lt;p&gt;Title for the link&lt;/p&gt;" type="string" variable="$title">
            <type>string</type>
          </tag>
          <tag name="param" line="69" description="&lt;p&gt;Options for pagination link&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="69" description="A &quot;next&quot; link or a disabled link" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default>'Next &gt;&gt;'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="83" package="Default">
        <name>prev</name>
        <full_name>\MeTools\View\Helper\PaginatorHelper::prev()</full_name>
        <docblock line="83">
          <description>Generates a "previous" link for a set of paged records</description>
          <long-description></long-description>
          <tag name="param" line="83" description="&lt;p&gt;Title for the link&lt;/p&gt;" type="string" variable="$title">
            <type>string</type>
          </tag>
          <tag name="param" line="83" description="&lt;p&gt;Options for pagination link&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="83" description="A &quot;previous&quot; link or a disabled link" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default>'&lt;&lt; Previous'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="View/Helper/IconHelper.php" generated-path="View.Helper.IconHelper.html" hash="4664452abfb790db62a57ceee132f6e0" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.12"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="CakeHtmlHelper">\Cake\View\Helper\HtmlHelper</namespace-alias>
    <namespace-alias name="OptionsParser">\MeTools\View\OptionsParser</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\View\Helper" line="22" package="Default">
      <extends>\Cake\View\Helper\HtmlHelper</extends>
      <name>IconHelper</name>
      <full_name>\MeTools\View\Helper\IconHelper</full_name>
      <docblock line="22">
        <description>Provides functionalities for creating HTML icons</description>
        <long-description></long-description>
        <tag name="package" line="22" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="32" package="Default">
        <name>addIconToText</name>
        <full_name>\MeTools\View\Helper\IconHelper::addIconToText()</full_name>
        <docblock line="32">
          <description>Adds icons to text</description>
          <long-description></long-description>
          <tag name="param" line="32" description="&lt;p&gt;Text&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="param" line="32" description="&lt;p&gt;Instance of &lt;code&gt;OptionsParser&lt;/code&gt;&lt;/p&gt;" type="\MeTools\View\OptionsParser" variable="$options">
            <type>\MeTools\View\OptionsParser</type>
          </tag>
          <tag name="return" line="32" description="Text with icons and instance of `OptionsParser`" type="array">
            <type>array</type>
          </tag>
          <tag name="since" line="32" description="2.16.2-beta"/>
          <tag name="uses" line="32" description="" link="\MeTools\View\Helper\IconHelper::icon()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default></default>
          <type>\MeTools\View\OptionsParser</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\View\Helper" line="58" package="Default">
        <name>buildIconClasses</name>
        <full_name>\MeTools\View\Helper\IconHelper::buildIconClasses()</full_name>
        <docblock line="58">
          <description>Internal method to build icon classes</description>
          <long-description></long-description>
          <tag name="param" line="58" description="&lt;p&gt;Icons&lt;/p&gt;" type="string|array" variable="$icon">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="return" line="58" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="since" line="58" description="2.16.2-beta"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$icon</name>
          <default></default>
          <type>string|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="97" package="Default">
        <name>icon</name>
        <full_name>\MeTools\View\Helper\IconHelper::icon()</full_name>
        <docblock line="97">
          <description>Returns icons tag.</description>
          <long-description>Example:
&lt;code&gt;
echo $this-&gt;Html-&gt;icon('home');
&lt;/code&gt;
Returns:
&lt;code&gt;
&lt;i class="fas fa-home"&gt; &lt;/i&gt;
&lt;/code&gt;

Example:
&lt;code&gt;
echo $this-&gt;Html-&gt;icon(['hand-o-right', '2x']);
&lt;/code&gt;
Returns:
&lt;code&gt;
&lt;i class="fas fa-hand-o-right fa-2x"&gt; &lt;/i&gt;
&lt;/code&gt;</long-description>
          <tag name="param" line="97" description="&lt;p&gt;Icons. You can also pass multiple arguments&lt;/p&gt;" type="string|array" variable="$icon">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="return" line="97" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="97" description="Font Awesome icons" link="http://fortawesome.github.io/Font-Awesome"/>
          <tag name="uses" line="97" description="" link="\MeTools\View\Helper\IconHelper::buildIconClasses()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$icon</name>
          <default></default>
          <type>string|array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Command/Install/FixComposerJsonCommand.php" generated-path="Command.Install.FixComposerJsonCommand.html" hash="4b75baf9e375b9c33a3f9cf773104367" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.0"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Arguments">\Cake\Console\Arguments</namespace-alias>
    <namespace-alias name="ConsoleIo">\Cake\Console\ConsoleIo</namespace-alias>
    <namespace-alias name="ConsoleOptionParser">\Cake\Console\ConsoleOptionParser</namespace-alias>
    <namespace-alias name="Exception">\Exception</namespace-alias>
    <namespace-alias name="Command">\MeTools\Console\Command</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Command\Install" line="25" package="Default">
      <extends>\MeTools\Console\Command</extends>
      <name>FixComposerJsonCommand</name>
      <full_name>\MeTools\Command\Install\FixComposerJsonCommand</full_name>
      <docblock line="25">
        <description>Creates symbolic links for vendor assets</description>
        <long-description></long-description>
        <tag name="package" line="25" description="Default"/>
        <tag name="inherited_from" description="\MeTools\Console\Command" refers="\MeTools\Console\Command" link="/classes/MeTools.Console.Command.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="32" package="Default">
        <name>buildOptionParser</name>
        <full_name>\MeTools\Command\Install\FixComposerJsonCommand::buildOptionParser()</full_name>
        <docblock line="32">
          <description>Hook method for defining this command's option parser</description>
          <long-description></long-description>
          <tag name="param" line="32" description="&lt;p&gt;The parser to be defined&lt;/p&gt;" type="\Cake\Console\ConsoleOptionParser" variable="$parser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
          <tag name="return" line="32" description="" type="\Cake\Console\ConsoleOptionParser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parser</name>
          <default></default>
          <type>\Cake\Console\ConsoleOptionParser</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="49" package="Default">
        <name>execute</name>
        <full_name>\MeTools\Command\Install\FixComposerJsonCommand::execute()</full_name>
        <docblock line="49">
          <description>Creates symbolic links for vendor assets</description>
          <long-description></long-description>
          <tag name="param" line="49" description="&lt;p&gt;The command arguments&lt;/p&gt;" type="\Cake\Console\Arguments" variable="$args">
            <type>\Cake\Console\Arguments</type>
          </tag>
          <tag name="param" line="49" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="return" line="49" description="The exit code or null for success" type="null|integer">
            <type>null</type>
            <type>integer</type>
          </tag>
          <tag name="uses" line="49" description="" link="\MeTools\Console\Command::createLink()"/>
          <tag name="uses" line="49" description="" link="\MeTools\Command\Install\$links"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>\Cake\Console\Arguments</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="34" package="Default">
        <name>verboseIfFileExists</name>
        <full_name>\MeTools\Console\Command::verboseIfFileExists()</full_name>
        <docblock line="34">
          <description>Internal method to check if a file already exists and output a warning at
 the verbose level</description>
          <long-description></long-description>
          <tag name="param" line="34" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="34" description="&lt;p&gt;Path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="34" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="53" package="Default">
        <name>copyFile</name>
        <full_name>\MeTools\Console\Command::copyFile()</full_name>
        <docblock line="53">
          <description>Copies a file</description>
          <long-description></long-description>
          <tag name="param" line="53" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Source file&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Destination file&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="53" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="53" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="85" package="Default">
        <name>createDir</name>
        <full_name>\MeTools\Console\Command::createDir()</full_name>
        <docblock line="85">
          <description>Creates a directory.</description>
          <long-description>This method creates directories recursively.</long-description>
          <tag name="param" line="85" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;Directory path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::folderChmod()"/>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="111" package="Default">
        <name>createFile</name>
        <full_name>\MeTools\Console\Command::createFile()</full_name>
        <docblock line="111">
          <description>Creates a file at given path</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Where to put the file&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Content to put in the file&lt;/p&gt;" type="string" variable="$contents">
            <type>string</type>
          </tag>
          <tag name="return" line="111" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="111" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contents</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="123" package="Default">
        <name>createLink</name>
        <full_name>\MeTools\Console\Command::createLink()</full_name>
        <docblock line="123">
          <description>Creates a symbolic link</description>
          <long-description></long-description>
          <tag name="param" line="123" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Source file or directory&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Destination file or directory&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="154" package="Default">
        <name>folderChmod</name>
        <full_name>\MeTools\Console\Command::folderChmod()</full_name>
        <docblock line="154">
          <description>Sets folder chmods.</description>
          <long-description>This method applies permissions recursively.</long-description>
          <tag name="param" line="154" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Folder path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Chmod&lt;/p&gt;" type="integer" variable="$chmod">
            <type>integer</type>
          </tag>
          <tag name="return" line="154" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$chmod</name>
          <default>511</default>
          <type>integer</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
    </class>
  </file>
  <file path="Plugin.php" generated-path="Plugin.html" hash="330ed6c545bc4bddc0effa7aaae92aa8" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.16.9"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Assets">\Assets\Plugin</namespace-alias>
    <namespace-alias name="BasePlugin">\Cake\Core\BasePlugin</namespace-alias>
    <namespace-alias name="Configure">\Cake\Core\Configure</namespace-alias>
    <namespace-alias name="PluginApplicationInterface">\Cake\Core\PluginApplicationInterface</namespace-alias>
    <namespace-alias name="CreateDirectoriesCommand">\MeTools\Command\Install\CreateDirectoriesCommand</namespace-alias>
    <namespace-alias name="CreatePluginsLinksCommand">\MeTools\Command\Install\CreatePluginsLinksCommand</namespace-alias>
    <namespace-alias name="CreateRobotsCommand">\MeTools\Command\Install\CreateRobotsCommand</namespace-alias>
    <namespace-alias name="CreateVendorsLinksCommand">\MeTools\Command\Install\CreateVendorsLinksCommand</namespace-alias>
    <namespace-alias name="FixComposerJsonCommand">\MeTools\Command\Install\FixComposerJsonCommand</namespace-alias>
    <namespace-alias name="RunAllCommand">\MeTools\Command\Install\RunAllCommand</namespace-alias>
    <namespace-alias name="SetPermissionsCommand">\MeTools\Command\Install\SetPermissionsCommand</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools" line="31" package="Default">
      <extends>\Cake\Core\BasePlugin</extends>
      <name>Plugin</name>
      <full_name>\MeTools\Plugin</full_name>
      <docblock line="31">
        <description>Plugin class</description>
        <long-description></long-description>
        <tag name="package" line="31" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools" line="39" package="Default">
        <name>bootstrap</name>
        <full_name>\MeTools\Plugin::bootstrap()</full_name>
        <docblock line="39">
          <description>Load all the application configuration and bootstrap logic</description>
          <long-description></long-description>
          <tag name="param" line="39" description="&lt;p&gt;The host application&lt;/p&gt;" type="\Cake\Core\PluginApplicationInterface" variable="$app">
            <type>\Cake\Core\PluginApplicationInterface</type>
          </tag>
          <tag name="return" line="39" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="since" line="39" description="2.17.3"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$app</name>
          <default></default>
          <type>\Cake\Core\PluginApplicationInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools" line="79" package="Default">
        <name>console</name>
        <full_name>\MeTools\Plugin::console()</full_name>
        <docblock line="79">
          <description>Add console commands for the plugin</description>
          <long-description></long-description>
          <tag name="param" line="79" description="&lt;p&gt;The command collection to update&lt;/p&gt;" type="\MeTools\Cake\Console\CommandCollection" variable="$commands">
            <type>\MeTools\Cake\Console\CommandCollection</type>
          </tag>
          <tag name="return" line="79" description="" type="\MeTools\Cake\Console\CommandCollection">
            <type>\MeTools\Cake\Console\CommandCollection</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$commands</name>
          <default></default>
          <type>\MeTools\Cake\Console\CommandCollection</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Utility/BBCode.php" generated-path="Utility.BBCode.html" hash="895ebe99b1c4fd1c1c1fef7f0c0bcc71" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.13"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="View">\Cake\View\View</namespace-alias>
    <namespace-alias name="HtmlHelper">\MeTools\View\Helper\HtmlHelper</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Utility" line="23" package="Default">
      <extends/>
      <name>BBCode</name>
      <full_name>\MeTools\Utility\BBCode</full_name>
      <docblock line="23">
        <description>This utility allows you to handle some BBCode.</description>
        <long-description>The `parser()` method executes all parsers.</long-description>
        <tag name="package" line="23" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="MeTools\Utility" line="29" package="Default">
        <name>$Html</name>
        <full_name>\MeTools\Utility\BBCode::$Html</full_name>
        <default></default>
        <docblock line="29">
          <description>An `HtmlHelper` instance</description>
          <long-description></long-description>
          <tag name="var" line="29" description="" type="\MeTools\View\Helper\HtmlHelper" variable="">
            <type>\MeTools\View\Helper\HtmlHelper</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="MeTools\Utility" line="35" package="Default">
        <name>$pattern</name>
        <full_name>\MeTools\Utility\BBCode::$pattern</full_name>
        <default>array('image' =&gt; '/\[img](.+?)\[\/img]/', 'readmore' =&gt; '/(&lt;p(&gt;|.*?[^?]&gt;))?\[read\-?more\s*\/?\s*\](&lt;\/p&gt;)?/', 'url' =&gt; '/\[url=[\'"](.+?)[\'"]](.+?)\[\/url]/', 'youtube' =&gt; '/\[youtube](.+?)\[\/youtube]/')</default>
        <docblock line="35">
          <description>Pattern</description>
          <long-description></long-description>
          <tag name="var" line="35" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Utility" line="46" package="Default">
        <name>__construct</name>
        <full_name>\MeTools\Utility\BBCode::__construct()</full_name>
        <docblock line="46">
          <description>Constructor</description>
          <long-description></long-description>
          <tag name="param" line="46" description="&lt;p&gt;An &lt;code&gt;HtmlHelper&lt;/code&gt; instance&lt;/p&gt;" type="\MeTools\View\Helper\HtmlHelper|null" variable="$HtmlHelper">
            <type>\MeTools\View\Helper\HtmlHelper</type>
            <type>null</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$HtmlHelper</name>
          <default>null</default>
          <type>\MeTools\View\Helper\HtmlHelper|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Utility" line="56" package="Default">
        <name>parser</name>
        <full_name>\MeTools\Utility\BBCode::parser()</full_name>
        <docblock line="56">
          <description>Executes all parsers</description>
          <long-description></long-description>
          <tag name="param" line="56" description="&lt;p&gt;Text&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="return" line="56" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Utility" line="75" package="Default">
        <name>remove</name>
        <full_name>\MeTools\Utility\BBCode::remove()</full_name>
        <docblock line="75">
          <description>Removes all BBCode</description>
          <long-description></long-description>
          <tag name="param" line="75" description="&lt;p&gt;Text&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="return" line="75" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="75" description="" link="\MeTools\Utility\BBCode::$pattern"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Utility" line="90" package="Default">
        <name>image</name>
        <full_name>\MeTools\Utility\BBCode::image()</full_name>
        <docblock line="90">
          <description>Parses image code.</description>
          <long-description>&lt;code&gt;
[img]mypic.gif[/img]
&lt;/code&gt;</long-description>
          <tag name="param" line="90" description="&lt;p&gt;Text&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="return" line="90" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="90" description="" link="\MeTools\Utility\BBCode::$Html"/>
          <tag name="uses" line="90" description="" link="\MeTools\Utility\BBCode::$pattern"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Utility" line="106" package="Default">
        <name>readMore</name>
        <full_name>\MeTools\Utility\BBCode::readMore()</full_name>
        <docblock line="106">
          <description>Parses "read mode" code. Example:
&lt;code&gt;
[read-more /]
&lt;/code&gt;</description>
          <long-description></long-description>
          <tag name="param" line="106" description="&lt;p&gt;Text&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="return" line="106" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="106" description="" link="\MeTools\Utility\BBCode::$pattern"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Utility" line="121" package="Default">
        <name>url</name>
        <full_name>\MeTools\Utility\BBCode::url()</full_name>
        <docblock line="121">
          <description>Parses url code.</description>
          <long-description>&lt;code&gt;
[url="http://example"]my link[/url]
&lt;/code&gt;</long-description>
          <tag name="param" line="121" description="&lt;p&gt;Text&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="return" line="121" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="121" description="" link="\MeTools\Utility\BBCode::$Html"/>
          <tag name="uses" line="121" description="" link="\MeTools\Utility\BBCode::$pattern"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Utility" line="146" package="Default">
        <name>youtube</name>
        <full_name>\MeTools\Utility\BBCode::youtube()</full_name>
        <docblock line="146">
          <description>Parses Youtube code.</description>
          <long-description>You can use video ID or video url.

Examples:
&lt;code&gt;
[youtube]bL_CJKq9rIw[/youtube]
&lt;/code&gt;

&lt;code&gt;
[youtube]http://youtube.com/watch?v=bL_CJKq9rIw[/youtube]
&lt;/code&gt;</long-description>
          <tag name="param" line="146" description="&lt;p&gt;Text&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="return" line="146" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="146" description="" link="\MeTools\Utility\Youtube::getId()"/>
          <tag name="uses" line="146" description="" link="\MeTools\Utility\BBCode::$Html"/>
          <tag name="uses" line="146" description="" link="\MeTools\Utility\BBCode::$pattern"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Command/Install/SetPermissionsCommand.php" generated-path="Command.Install.SetPermissionsCommand.html" hash="e60e69b7eb23e574e5e161608a7e0f4f" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.0"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Arguments">\Cake\Console\Arguments</namespace-alias>
    <namespace-alias name="ConsoleIo">\Cake\Console\ConsoleIo</namespace-alias>
    <namespace-alias name="ConsoleOptionParser">\Cake\Console\ConsoleOptionParser</namespace-alias>
    <namespace-alias name="Configure">\Cake\Core\Configure</namespace-alias>
    <namespace-alias name="Command">\MeTools\Console\Command</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Command\Install" line="25" package="Default">
      <extends>\MeTools\Console\Command</extends>
      <name>SetPermissionsCommand</name>
      <full_name>\MeTools\Command\Install\SetPermissionsCommand</full_name>
      <docblock line="25">
        <description>Sets directories permissions</description>
        <long-description></long-description>
        <tag name="package" line="25" description="Default"/>
        <tag name="inherited_from" description="\MeTools\Console\Command" refers="\MeTools\Console\Command" link="/classes/MeTools.Console.Command.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="32" package="Default">
        <name>buildOptionParser</name>
        <full_name>\MeTools\Command\Install\SetPermissionsCommand::buildOptionParser()</full_name>
        <docblock line="32">
          <description>Hook method for defining this command's option parser</description>
          <long-description></long-description>
          <tag name="param" line="32" description="&lt;p&gt;The parser to be defined&lt;/p&gt;" type="\Cake\Console\ConsoleOptionParser" variable="$parser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
          <tag name="return" line="32" description="" type="\Cake\Console\ConsoleOptionParser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parser</name>
          <default></default>
          <type>\Cake\Console\ConsoleOptionParser</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="44" package="Default">
        <name>execute</name>
        <full_name>\MeTools\Command\Install\SetPermissionsCommand::execute()</full_name>
        <docblock line="44">
          <description>Sets directories permissions</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;The command arguments&lt;/p&gt;" type="\Cake\Console\Arguments" variable="$args">
            <type>\Cake\Console\Arguments</type>
          </tag>
          <tag name="param" line="44" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="return" line="44" description="The exit code or null for success" type="null|integer">
            <type>null</type>
            <type>integer</type>
          </tag>
          <tag name="uses" line="44" description="" link="\MeTools\Console\Command::folderChmod"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>\Cake\Console\Arguments</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="34" package="Default">
        <name>verboseIfFileExists</name>
        <full_name>\MeTools\Console\Command::verboseIfFileExists()</full_name>
        <docblock line="34">
          <description>Internal method to check if a file already exists and output a warning at
 the verbose level</description>
          <long-description></long-description>
          <tag name="param" line="34" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="34" description="&lt;p&gt;Path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="34" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="53" package="Default">
        <name>copyFile</name>
        <full_name>\MeTools\Console\Command::copyFile()</full_name>
        <docblock line="53">
          <description>Copies a file</description>
          <long-description></long-description>
          <tag name="param" line="53" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Source file&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Destination file&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="53" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="53" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="85" package="Default">
        <name>createDir</name>
        <full_name>\MeTools\Console\Command::createDir()</full_name>
        <docblock line="85">
          <description>Creates a directory.</description>
          <long-description>This method creates directories recursively.</long-description>
          <tag name="param" line="85" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;Directory path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::folderChmod()"/>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="111" package="Default">
        <name>createFile</name>
        <full_name>\MeTools\Console\Command::createFile()</full_name>
        <docblock line="111">
          <description>Creates a file at given path</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Where to put the file&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Content to put in the file&lt;/p&gt;" type="string" variable="$contents">
            <type>string</type>
          </tag>
          <tag name="return" line="111" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="111" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contents</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="123" package="Default">
        <name>createLink</name>
        <full_name>\MeTools\Console\Command::createLink()</full_name>
        <docblock line="123">
          <description>Creates a symbolic link</description>
          <long-description></long-description>
          <tag name="param" line="123" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Source file or directory&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Destination file or directory&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="154" package="Default">
        <name>folderChmod</name>
        <full_name>\MeTools\Console\Command::folderChmod()</full_name>
        <docblock line="154">
          <description>Sets folder chmods.</description>
          <long-description>This method applies permissions recursively.</long-description>
          <tag name="param" line="154" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Folder path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Chmod&lt;/p&gt;" type="integer" variable="$chmod">
            <type>integer</type>
          </tag>
          <tag name="return" line="154" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$chmod</name>
          <default>511</default>
          <type>integer</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
    </class>
  </file>
  <file path="Utility/Youtube.php" generated-path="Utility.Youtube.html" hash="a65e1b8031ff3ac6b2cab2566e9e21b6" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="MeTools\Utility" line="18" package="Default">
      <extends/>
      <name>Youtube</name>
      <full_name>\MeTools\Utility\Youtube</full_name>
      <docblock line="18">
        <description>An utility to get information about YouTube videos</description>
        <long-description></long-description>
        <tag name="package" line="18" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="MeTools\Utility" line="25" package="Default">
        <name>getId</name>
        <full_name>\MeTools\Utility\Youtube::getId()</full_name>
        <docblock line="25">
          <description>Parses a YouTube url and returns the YouTube ID</description>
          <long-description></long-description>
          <tag name="param" line="25" description="&lt;p&gt;Video url&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="return" line="25" description="Youtube ID or `false`" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="MeTools\Utility" line="52" package="Default">
        <name>getPreview</name>
        <full_name>\MeTools\Utility\Youtube::getPreview()</full_name>
        <docblock line="52">
          <description>Gets the preview for a video</description>
          <long-description></long-description>
          <tag name="param" line="52" description="&lt;p&gt;YouTube ID or url&lt;/p&gt;" type="string" variable="$id">
            <type>string</type>
          </tag>
          <tag name="return" line="52" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="52" description="" link="\MeTools\Utility\Youtube::getId()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="MeTools\Utility" line="62" package="Default">
        <name>getUrl</name>
        <full_name>\MeTools\Utility\Youtube::getUrl()</full_name>
        <docblock line="62">
          <description>Gets the url for a video</description>
          <long-description></long-description>
          <tag name="param" line="62" description="&lt;p&gt;YouTube ID&lt;/p&gt;" type="string" variable="$id">
            <type>string</type>
          </tag>
          <tag name="return" line="62" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Controller/Component/FlashComponent.php" generated-path="Controller.Component.FlashComponent.html" hash="185e0177d8721a6f72b38a6364bb6eb0" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="see" line="0" description="FlashComponent" link="http://api.cakephp.org/3.4/class-Cake.Controller.Component.FlashComponent.html"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="CakeFlashComponent">\Cake\Controller\Component\FlashComponent</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Controller\Component" line="30" package="Default">
      <extends>\Cake\Controller\Component\FlashComponent</extends>
      <name>FlashComponent</name>
      <full_name>\MeTools\Controller\Component\FlashComponent</full_name>
      <docblock line="30">
        <description>Provides a way to set one-time notification messages to be displayed after
processing a form or acknowledging data.</description>
        <long-description>This class allows the `alert()`, `error()`, `notice()` and `success()`
methods are automatically handled by the plugin and rendered dynamically
using the `src/Template/Element/Flash/flash.ctp` template.</long-description>
        <tag name="package" line="30" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Controller\Component" line="38" package="Default">
        <name>__call</name>
        <full_name>\MeTools\Controller\Component\FlashComponent::__call()</full_name>
        <docblock line="38">
          <description>Magic method for verbose flash methods based on element names.</description>
          <long-description></long-description>
          <tag name="param" line="38" description="&lt;p&gt;Element name to use&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="38" description="&lt;p&gt;Parameters to pass&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="38" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" static="false" visibility="public" line="30">
        <name>alert</name>
        <docblock>
          <description>Set a message an "alert" message</description>
          <long-description/>
          <tag name="magic" line="30"/>
          <tag name="return" line="30" type="">
            <type/>
          </tag>
          <tag name="method" line="30" description="Set a message an &quot;alert&quot; message" method_name="alert"/>
        </docblock>
      </method>
      <method final="false" static="false" visibility="public" line="30">
        <name>error</name>
        <docblock>
          <description>Set a message an "error" message</description>
          <long-description/>
          <tag name="magic" line="30"/>
          <tag name="return" line="30" type="">
            <type/>
          </tag>
          <tag name="method" line="30" description="Set a message an &quot;error&quot; message" method_name="error"/>
        </docblock>
      </method>
      <method final="false" static="false" visibility="public" line="30">
        <name>notice</name>
        <docblock>
          <description>Set a message a "notice" message</description>
          <long-description/>
          <tag name="magic" line="30"/>
          <tag name="return" line="30" type="">
            <type/>
          </tag>
          <tag name="method" line="30" description="Set a message a &quot;notice&quot; message" method_name="notice"/>
        </docblock>
      </method>
      <method final="false" static="false" visibility="public" line="30">
        <name>success</name>
        <docblock>
          <description>Set a message a "success" message</description>
          <long-description/>
          <tag name="magic" line="30"/>
          <tag name="return" line="30" type="">
            <type/>
          </tag>
          <tag name="method" line="30" description="Set a message a &quot;success&quot; message" method_name="success"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="View/OptionsParser.php" generated-path="View.OptionsParser.html" hash="1af5bf4bf458cea07ad8a3895c8ef104" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.16.2-beta"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Hash">\Cake\Utility\Hash</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\View" line="21" package="Default">
      <extends/>
      <name>OptionsParser</name>
      <full_name>\MeTools\View\OptionsParser</full_name>
      <docblock line="21">
        <description>An options parser</description>
        <long-description></long-description>
        <tag name="package" line="21" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="MeTools\View" line="27" package="Default">
        <name>$Default</name>
        <full_name>\MeTools\View\OptionsParser::$Default</full_name>
        <default></default>
        <docblock line="27">
          <description>Instance of `OptionsParser` for default values</description>
          <long-description></long-description>
          <tag name="var" line="27" description="" type="\MeTools\View\MeTools\View\OptionsParser" variable="">
            <type>\MeTools\View\MeTools\View\OptionsParser</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="MeTools\View" line="33" package="Default">
        <name>$options</name>
        <full_name>\MeTools\View\OptionsParser::$options</full_name>
        <default>array()</default>
        <docblock line="33">
          <description>Existing options</description>
          <long-description></long-description>
          <tag name="var" line="33" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="MeTools\View" line="39" package="Default">
        <name>$toBeExploded</name>
        <full_name>\MeTools\View\OptionsParser::$toBeExploded</full_name>
        <default>array('class', 'data-toggle')</default>
        <docblock line="39">
          <description>Keys of options to be exploded</description>
          <long-description></long-description>
          <tag name="var" line="39" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="50" package="Default">
        <name>__construct</name>
        <full_name>\MeTools\View\OptionsParser::__construct()</full_name>
        <docblock line="50">
          <description>Constructor</description>
          <long-description></long-description>
          <tag name="param" line="50" description="&lt;p&gt;Existing options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="50" description="&lt;p&gt;Default values&lt;/p&gt;" type="array|null" variable="$defaults">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="return" line="50" description="" type="\MeTools\View\OptionsParser">
            <type>\MeTools\View\OptionsParser</type>
          </tag>
          <tag name="uses" line="50" description="" link="\MeTools\View\OptionsParser::buildValue()"/>
          <tag name="uses" line="50" description="" link="\MeTools\View\OptionsParser::$Default"/>
          <tag name="uses" line="50" description="" link="\MeTools\View\OptionsParser::$options"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$defaults</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\View" line="69" package="Default">
        <name>buildValue</name>
        <full_name>\MeTools\View\OptionsParser::buildValue()</full_name>
        <docblock line="69">
          <description>Internal method to build a value</description>
          <long-description></long-description>
          <tag name="param" line="69" description="&lt;p&gt;Option value&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="param" line="69" description="&lt;p&gt;Option key&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="return" line="69" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="69" description="" link="\MeTools\View\OptionsParser::$toBeExploded"/>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="91" package="Default">
        <name>add</name>
        <full_name>\MeTools\View\OptionsParser::add()</full_name>
        <docblock line="91">
          <description>Adds a value.</description>
          <long-description>You can also pass an array with the keys and values as the only argument.</long-description>
          <tag name="param" line="91" description="&lt;p&gt;Key or array with keys and values&lt;/p&gt;" type="string|array" variable="$key">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="param" line="91" description="&lt;p&gt;Value&lt;/p&gt;" type="mixed|null" variable="$value">
            <type>mixed</type>
            <type>null</type>
          </tag>
          <tag name="return" line="91" description="" type="\MeTools\View\OptionsParser">
            <type>\MeTools\View\OptionsParser</type>
          </tag>
          <tag name="uses" line="91" description="" link="\MeTools\View\OptionsParser::buildValue()"/>
          <tag name="uses" line="91" description="" link="\MeTools\View\OptionsParser::$options"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default>null</default>
          <type>mixed|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="121" package="Default">
        <name>addButtonClasses</name>
        <full_name>\MeTools\View\OptionsParser::addButtonClasses()</full_name>
        <docblock line="121">
          <description>Adds button classes.</description>
          <long-description>Classes can be passed as string, array or multiple arguments, with or
 without the `btn-` prefix.

Examples:
&lt;code&gt;
$options-&gt;addButtonClasses('primary lg');
$options-&gt;addButtonClasses('primary', 'lg');
$options-&gt;addButtonClasses(['btn-primary', 'lg']);
&lt;/code&gt;</long-description>
          <tag name="param" line="121" description="&lt;p&gt;Classes string, array or multiple arguments&lt;/p&gt;" type="string|array" variable="$classes">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="return" line="121" description="" type="\MeTools\View\OptionsParser">
            <type>\MeTools\View\OptionsParser</type>
          </tag>
          <tag name="uses" line="121" description="" link="\MeTools\View\OptionsParser::append()"/>
          <tag name="uses" line="121" description="" link="\MeTools\View\OptionsParser::get()"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$classes</name>
          <default>'btn-light'</default>
          <type>string|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="167" package="Default">
        <name>append</name>
        <full_name>\MeTools\View\OptionsParser::append()</full_name>
        <docblock line="167">
          <description>Appends a value.</description>
          <long-description>If the existing value and the value to append are both strings, the
 strings will be concatenated. In any other cases, an array of elements
 will be created.

You can also pass an array with the keys and values as the only argument.</long-description>
          <tag name="param" line="167" description="&lt;p&gt;Key or array with keys and values&lt;/p&gt;" type="string|array" variable="$key">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="param" line="167" description="&lt;p&gt;Value&lt;/p&gt;" type="mixed|null" variable="$value">
            <type>mixed</type>
            <type>null</type>
          </tag>
          <tag name="return" line="167" description="" type="\MeTools\View\OptionsParser">
            <type>\MeTools\View\OptionsParser</type>
          </tag>
          <tag name="uses" line="167" description="" link="\MeTools\View\OptionsParser::add()"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string|array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default>null</default>
          <type>mixed|null</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="201" package="Default">
        <name>consume</name>
        <full_name>\MeTools\View\OptionsParser::consume()</full_name>
        <docblock line="201">
          <description>Used to read and delete a value from a key</description>
          <long-description></long-description>
          <tag name="param" line="201" description="&lt;p&gt;Key&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="return" line="201" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="since" line="201" description="2.16.10"/>
          <tag name="uses" line="201" description="" link="\MeTools\View\OptionsParser::delete()"/>
          <tag name="uses" line="201" description="" link="\MeTools\View\OptionsParser::get()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="226" package="Default">
        <name>contains</name>
        <full_name>\MeTools\View\OptionsParser::contains()</full_name>
        <docblock line="226">
          <description>Checks if a key contains a value.</description>
          <long-description>If the existing value is an array:
 - if you pass an array, the elements of the two arrays will be compared;
 - otherwise, it will be checked if the value you have passed is
     contained in the array.

In all other cases, the value you have passed and your existing value
 will be compared.</long-description>
          <tag name="param" line="226" description="&lt;p&gt;Key&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="226" description="&lt;p&gt;Value&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="226" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="226" description="" link="\MeTools\View\OptionsParser::exists()"/>
          <tag name="uses" line="226" description="" link="\MeTools\View\OptionsParser::get()"/>
          <tag name="uses" line="226" description="" link="\MeTools\View\OptionsParser::$toBeExploded"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="252" package="Default">
        <name>delete</name>
        <full_name>\MeTools\View\OptionsParser::delete()</full_name>
        <docblock line="252">
          <description>Delete a key</description>
          <long-description></long-description>
          <tag name="param" line="252" description="&lt;p&gt;Key or array of keys&lt;/p&gt;" type="string|array" variable="$key">
            <type>string</type>
            <type>array</type>
          </tag>
          <tag name="return" line="252" description="" type="\MeTools\View\OptionsParser">
            <type>\MeTools\View\OptionsParser</type>
          </tag>
          <tag name="uses" line="252" description="" link="\MeTools\View\OptionsParser::$options"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string|array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="274" package="Default">
        <name>exists</name>
        <full_name>\MeTools\View\OptionsParser::exists()</full_name>
        <docblock line="274">
          <description>Checks if a key exists</description>
          <long-description></long-description>
          <tag name="param" line="274" description="&lt;p&gt;Key&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="return" line="274" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="274" description="" link="\MeTools\View\OptionsParser::$Default"/>
          <tag name="uses" line="274" description="" link="\MeTools\View\OptionsParser::$options"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="286" package="Default">
        <name>get</name>
        <full_name>\MeTools\View\OptionsParser::get()</full_name>
        <docblock line="286">
          <description>Gets the value for a key</description>
          <long-description></long-description>
          <tag name="param" line="286" description="&lt;p&gt;Key&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="return" line="286" description="" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="286" description="" link="\MeTools\View\OptionsParser::$Default"/>
          <tag name="uses" line="286" description="" link="\MeTools\View\OptionsParser::$options"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="299" package="Default">
        <name>toArray</name>
        <full_name>\MeTools\View\OptionsParser::toArray()</full_name>
        <docblock line="299">
          <description>Returns options as array</description>
          <long-description></long-description>
          <tag name="return" line="299" description="" type="array">
            <type>array</type>
          </tag>
          <tag name="uses" line="299" description="" link="\MeTools\View\OptionsParser::$Default"/>
          <tag name="uses" line="299" description="" link="\MeTools\View\OptionsParser::$options"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="317" package="Default">
        <name>toString</name>
        <full_name>\MeTools\View\OptionsParser::toString()</full_name>
        <docblock line="317">
          <description>Returns options as string</description>
          <long-description></long-description>
          <tag name="return" line="317" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="317" description="" link="\MeTools\View\OptionsParser::toArray()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View" line="350" package="Default">
        <name>tooltip</name>
        <full_name>\MeTools\View\OptionsParser::tooltip()</full_name>
        <docblock line="350">
          <description>Builds keys for tooltip.</description>
          <long-description>Gets `tooltip` and `tooltip-align` keys and builds `data-tootle` and
 `data-placement` keys, as required by Bootstrap tooltips.</long-description>
          <tag name="return" line="350" description="" type="\MeTools\View\OptionsParser">
            <type>\MeTools\View\OptionsParser</type>
          </tag>
          <tag name="see" line="350" description="" link="http://getbootstrap.com/docs/4.0/components/tooltips"/>
          <tag name="uses" line="350" description="" link="\MeTools\View\OptionsParser::add()"/>
          <tag name="uses" line="350" description="" link="\MeTools\View\OptionsParser::append()"/>
          <tag name="uses" line="350" description="" link="\MeTools\View\OptionsParser::delete()"/>
          <tag name="uses" line="350" description="" link="\MeTools\View\OptionsParser::exists()"/>
          <tag name="uses" line="350" description="" link="\MeTools\View\OptionsParser::get()"/>
          <tag name="fluent" description="This method is part of a fluent interface and will return the same instance"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="View/Helper/LibraryHelper.php" generated-path="View.Helper.LibraryHelper.html" hash="9d2cfaf1f55a468937e6020c5e6732dd" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Plugin">\Cake\Core\Plugin</namespace-alias>
    <namespace-alias name="I18n">\Cake\I18n\I18n</namespace-alias>
    <namespace-alias name="Helper">\Cake\View\Helper</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\View\Helper" line="22" package="Default">
      <extends>\Cake\View\Helper</extends>
      <name>LibraryHelper</name>
      <full_name>\MeTools\View\Helper\LibraryHelper</full_name>
      <docblock line="22">
        <description>Library helper</description>
        <long-description></long-description>
        <tag name="package" line="22" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="MeTools\View\Helper" line="31" package="Default">
        <name>$helpers</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::$helpers</full_name>
        <default>array('Html' =&gt; array('className' =&gt; 'MeTools.Html'))</default>
        <docblock line="31">
          <description>Helpers.</description>
          <long-description>The `Asset` helper will be loaded by the `initialize()` method. If the
 `Assets` plugin doesn't exist, it will be a copy of the `Html` helper.</long-description>
          <tag name="var" line="31" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="MeTools\View\Helper" line="39" package="Default">
        <name>$output</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::$output</full_name>
        <default>array()</default>
        <docblock line="39">
          <description>It will contain the output code</description>
          <long-description></long-description>
          <tag name="var" line="39" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="50" package="Default">
        <name>initialize</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::initialize()</full_name>
        <docblock line="50">
          <description>Constructor hook method.</description>
          <long-description>Implement this method to avoid having to overwrite the constructor and
 call parent.</long-description>
          <tag name="param" line="50" description="&lt;p&gt;The configuration settings provided to this helper&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="50" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="since" line="50" description="2.18.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\View\Helper" line="71" package="Default">
        <name>buildDatetimepicker</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::buildDatetimepicker()</full_name>
        <docblock line="71">
          <description>Internal function to generate datepicker and timepicker.</description>
          <long-description>Bootstrap Datepicker and Moment.js should be installed via Composer.</long-description>
          <tag name="param" line="71" description="&lt;p&gt;Target field&lt;/p&gt;" type="string" variable="$input">
            <type>string</type>
          </tag>
          <tag name="param" line="71" description="&lt;p&gt;Options for the datepicker&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="71" description="jQuery code" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="71" description="Bootstrap 3 Datepicker v4 documentation" link="http://eonasdan.github.io/bootstrap-datetimepicker"/>
          <tag name="uses" line="71" description="" link="\MeTools\View\Helper\Assets\View\Helper\AssetHelper::css()"/>
          <tag name="uses" line="71" description="" link="\MeTools\View\Helper\Assets\View\Helper\AssetHelper::script()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$input</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="110" package="Default">
        <name>beforeLayout</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::beforeLayout()</full_name>
        <docblock line="110">
          <description>Before layout callback. beforeLayout is called before the layout is
 rendered</description>
          <long-description></long-description>
          <tag name="return" line="110" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="110" description="" link="\MeTools\View\Helper\MeTools\View\Helper\HtmlHelper::scriptBlock()"/>
          <tag name="uses" line="110" description="" link="\MeTools\View\Helper\output"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="136" package="Default">
        <name>analytics</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::analytics()</full_name>
        <docblock line="136">
          <description>Create a script block for Google Analytics</description>
          <long-description></long-description>
          <tag name="param" line="136" description="&lt;p&gt;Analytics ID&lt;/p&gt;" type="string" variable="$id">
            <type>string</type>
          </tag>
          <tag name="uses" line="136" description="" link="\MeTools\View\Helper\MeTools\View\Helper\HtmlHelper::scriptBlock()"/>
          <tag name="return" line="136" description="A script tag or `null`" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="160" package="Default">
        <name>ckeditor</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::ckeditor()</full_name>
        <docblock line="160">
          <description>Loads all CKEditor scripts.</description>
          <long-description>To know how to install and configure CKEditor, please refer to the
 `README.md` file.

CKEditor must be located into `APP/webroot/ckeditor`.

To create an input field for CKEditor, you should use the `ckeditor()`
 method provided by the `FormHelper`.</long-description>
          <tag name="param" line="160" description="&lt;p&gt;&lt;code&gt;true&lt;/code&gt; if you want to use the jQuery adapter&lt;/p&gt;" type="boolean" variable="$jquery">
            <type>boolean</type>
          </tag>
          <tag name="return" line="160" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="see" line="160" description="" link="\MeTools\View\Helper\MeTools\View\Helper\FormHelper::ckeditor()"/>
          <tag name="see" line="160" description="CKEditor documentation" link="http://docs.cksource.com"/>
          <tag name="uses" line="160" description="" link="\MeTools\View\Helper\MeTools\View\Helper\Html::script()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$jquery</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="199" package="Default">
        <name>datepicker</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::datepicker()</full_name>
        <docblock line="199">
          <description>Adds a datepicker to the `$input` field.</description>
          <long-description>To create an input field compatible with datepicker, you should use the
 `datepicker()` method provided by the `FormHelper`.

Bootstrap Datepicker and Moment.js should be installed via Composer.</long-description>
          <tag name="param" line="199" description="&lt;p&gt;Target field. Default is &lt;code&gt;.datepicker&lt;/code&gt;&lt;/p&gt;" type="string|null" variable="$input">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="199" description="&lt;p&gt;Options for the datepicker&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="199" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="see" line="199" description="" link="\MeTools\View\Helper\MeTools\View\Helper\FormHelper::datepicker()"/>
          <tag name="see" line="199" description="Bootstrap 3 Datepicker v4 documentation" link="http://eonasdan.github.io/bootstrap-datetimepicker"/>
          <tag name="uses" line="199" description="" link="\MeTools\View\Helper\output"/>
          <tag name="uses" line="199" description="" link="\MeTools\View\Helper\LibraryHelper::buildDatetimepicker()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$input</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="220" package="Default">
        <name>datetimepicker</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::datetimepicker()</full_name>
        <docblock line="220">
          <description>Adds a datetimepicker to the `$input` field.</description>
          <long-description>To create an input field compatible with datetimepicker, you should use
 the `datetimepicker()` method provided by the `FormHelper`.
Bootstrap Datepicker and Moment.js should be installed via Composer.</long-description>
          <tag name="param" line="220" description="&lt;p&gt;Target field. Default is &lt;code&gt;.datetimepicker&lt;/code&gt;&lt;/p&gt;" type="string|null" variable="$input">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="220" description="&lt;p&gt;Options for the datetimepicker&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="220" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="see" line="220" description="" link="\MeTools\View\Helper\MeTools\View\Helper\FormHelper::datetimepicker()"/>
          <tag name="see" line="220" description="Bootstrap 3 Datepicker v4 documentation" link="http://eonasdan.github.io/bootstrap-datetimepicker"/>
          <tag name="uses" line="220" description="" link="\MeTools\View\Helper\output"/>
          <tag name="uses" line="220" description="" link="\MeTools\View\Helper\LibraryHelper::buildDatetimepicker()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$input</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="233" package="Default">
        <name>fancybox</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::fancybox()</full_name>
        <docblock line="233">
          <description>Loads all FancyBox scripts.</description>
          <long-description>FancyBox must be installed via Composer.</long-description>
          <tag name="return" line="233" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="see" line="233" description="FancyBox documentation" link="http://fancyapps.com/fancybox/#docs"/>
          <tag name="uses" line="233" description="" link="\MeTools\View\Helper\Assets\View\Helper\AssetHelper::script()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="267" package="Default">
        <name>shareaholic</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::shareaholic()</full_name>
        <docblock line="267">
          <description>Create a script block for Shareaholic.</description>
          <long-description>Note that this code only adds the Shareaholic "setup code".
To render the "share buttons", you have to use the `HtmlHelper`.</long-description>
          <tag name="param" line="267" description="&lt;p&gt;Shareaholic site ID&lt;/p&gt;" type="string" variable="$siteId">
            <type>string</type>
          </tag>
          <tag name="return" line="267" description="Html code" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="uses" line="267" description="" link="\MeTools\View\Helper\Assets\View\Helper\AssetHelper::script()"/>
          <tag name="see" line="267" description="" link="\MeTools\View\Helper\MeTools\View\Helper\HtmlHelper::shareaholic()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$siteId</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="288" package="Default">
        <name>slugify</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::slugify()</full_name>
        <docblock line="288">
          <description>Through `slugify.js`, it provides the slug of a field.</description>
          <long-description>It reads the value of the `$sourceField` field and it sets its slug in
 the `$targetField`.</long-description>
          <tag name="param" line="288" description="&lt;p&gt;Source field&lt;/p&gt;" type="string" variable="$sourceField">
            <type>string</type>
          </tag>
          <tag name="param" line="288" description="&lt;p&gt;Target field&lt;/p&gt;" type="string" variable="$targetField">
            <type>string</type>
          </tag>
          <tag name="return" line="288" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="288" description="" link="\MeTools\View\Helper\Assets\View\Helper\AssetHelper::script()"/>
          <tag name="uses" line="288" description="" link="\MeTools\View\Helper\output"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$sourceField</name>
          <default>'form #title'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$targetField</name>
          <default>'form #slug'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="310" package="Default">
        <name>timepicker</name>
        <full_name>\MeTools\View\Helper\LibraryHelper::timepicker()</full_name>
        <docblock line="310">
          <description>Adds a timepicker to the `$input` field.</description>
          <long-description>To create an input field compatible with datepicker, you should use the
 `timepicker()` method provided by the `FormHelper`.

Bootstrap Datepicker and Moment.js should be installed via Composer.</long-description>
          <tag name="param" line="310" description="&lt;p&gt;Target field. Default is &lt;code&gt;.timepicker&lt;/code&gt;&lt;/p&gt;" type="string|null" variable="$input">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="310" description="&lt;p&gt;Options for the timepicker&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="310" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="see" line="310" description="" link="\MeTools\View\Helper\MeTools\View\Helper\FormHelper::timepicker()"/>
          <tag name="see" line="310" description="Bootstrap v3 datetimepicker widget documentation" link="https://github.com/Eonasdan/bootstrap-datetimepicker"/>
          <tag name="uses" line="310" description="" link="\MeTools\View\Helper\output"/>
          <tag name="uses" line="310" description="" link="\MeTools\View\Helper\LibraryHelper::buildDatetimepicker()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$input</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Core/request_detectors.php" generated-path="Core.request_detectors.html" hash="cb936a3b09ef994c7cab36d1e2b8a581" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="ServerRequest">\Cake\Http\ServerRequest</namespace-alias>
    <namespace-alias name="Router">\Cake\Routing\Router</namespace-alias>
  </file>
  <file path="View/Helper/FormHelper.php" generated-path="View.Helper.FormHelper.html" hash="addf7de291cd687ae8f499aa9f7d67a6" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="see" line="0" description="FormHelper" link="http://api.cakephp.org/3.4/class-Cake.View.Helper.FormHelper.html"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Hash">\Cake\Utility\Hash</namespace-alias>
    <namespace-alias name="CakeFormHelper">\Cake\View\Helper\FormHelper</namespace-alias>
    <namespace-alias name="View">\Cake\View\View</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\View\Helper" line="23" package="Default">
      <extends>\Cake\View\Helper\FormHelper</extends>
      <name>FormHelper</name>
      <full_name>\MeTools\View\Helper\FormHelper</full_name>
      <docblock line="23">
        <description>Provides functionalities for forms</description>
        <long-description></long-description>
        <tag name="package" line="23" description="Default"/>
      </docblock>
      <property static="false" visibility="public" namespace="MeTools\View\Helper" line="29" package="Default">
        <name>$helpers</name>
        <full_name>\MeTools\View\Helper\FormHelper::$helpers</full_name>
        <default>array('Html' =&gt; array('className' =&gt; 'MeTools.Html'), 'MeTools.Icon', 'Url')</default>
        <docblock line="29">
          <description>Helpers</description>
          <long-description></long-description>
          <tag name="var" line="29" description="" type="array" variable="">
            <type>array</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="MeTools\View\Helper" line="40" package="Default">
        <name>$inline</name>
        <full_name>\MeTools\View\Helper\FormHelper::$inline</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Property to check if we're working with an inline form.</description>
          <long-description>It's changed by `createInline()` method.</long-description>
          <tag name="var" line="40" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="51" package="Default">
        <name>__construct</name>
        <full_name>\MeTools\View\Helper\FormHelper::__construct()</full_name>
        <docblock line="51">
          <description>Construct the widgets and binds the default context providers.</description>
          <long-description>This method only rewrites the default templates config.</long-description>
          <tag name="param" line="51" description="&lt;p&gt;The View this helper is being attached to&lt;/p&gt;" type="\MeTools\View\Helper\Cake\View\View" variable="$view">
            <type>\MeTools\View\Helper\Cake\View\View</type>
          </tag>
          <tag name="param" line="51" description="&lt;p&gt;Configuration settings for the helper&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="51" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="51" description="" link="\MeTools\View\Helper\$_defaultConfig"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$view</name>
          <default></default>
          <type>\MeTools\View\Helper\Cake\View\View</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\View\Helper" line="79" package="Default">
        <name>__datetimepickerOptions</name>
        <full_name>\MeTools\View\Helper\FormHelper::__datetimepickerOptions()</full_name>
        <docblock line="79">
          <description>Internal method to get an `OptionParser` instance for datetime pickers</description>
          <long-description></long-description>
          <tag name="param" line="79" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;Class name&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="79" description="&lt;p&gt;Date time format&lt;/p&gt;" type="string" variable="$dateFormat">
            <type>string</type>
          </tag>
          <tag name="return" line="79" description="" type="\MeTools\View\OptionsParser">
            <type>\MeTools\View\OptionsParser</type>
          </tag>
          <tag name="since" line="79" description="2.18.12"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dateFormat</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="100" package="Default">
        <name>button</name>
        <full_name>\MeTools\View\Helper\FormHelper::button()</full_name>
        <docblock line="100">
          <description>Creates a button.</description>
          <long-description>This method creates a button. To create a POST button, you should use
 the `postButton()` method.
Instead, to create a link with the appearance of a button, you should
 use the `button()` method provided by `HtmlHelper`.</long-description>
          <tag name="param" line="100" description="&lt;p&gt;The button label or an image&lt;/p&gt;" type="string|null" variable="$title">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="100" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="100" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="100" description="MeTools\View\Helper\HtmlHelper::button()" link="\MeTools\View\Helper\postButton(),"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="115" package="Default">
        <name>checkbox</name>
        <full_name>\MeTools\View\Helper\FormHelper::checkbox()</full_name>
        <docblock line="115">
          <description>Creates a checkbox element</description>
          <long-description></long-description>
          <tag name="param" line="115" description="&lt;p&gt;Field name, should be &quot;Modelname.fieldname&quot;&lt;/p&gt;" type="string" variable="$fieldName">
            <type>string</type>
          </tag>
          <tag name="param" line="115" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="115" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fieldName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="136" package="Default">
        <name>ckeditor</name>
        <full_name>\MeTools\View\Helper\FormHelper::ckeditor()</full_name>
        <docblock line="136">
          <description>Creates a CKEditor textarea.</description>
          <long-description>To add the scripts for CKEditor, you should use the `LibraryHelper`.</long-description>
          <tag name="param" line="136" description="&lt;p&gt;Field name, should be &quot;Modelname.fieldname&quot;&lt;/p&gt;" type="string" variable="$fieldName">
            <type>string</type>
          </tag>
          <tag name="param" line="136" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="136" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="136" description="" link="\MeTools\View\Helper\MeTools\View\Helper\LibraryHelper::ckeditor()"/>
          <tag name="uses" line="136" description="" link="\MeTools\View\Helper\FormHelper::control()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fieldName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="153" package="Default">
        <name>control</name>
        <full_name>\MeTools\View\Helper\FormHelper::control()</full_name>
        <docblock line="153">
          <description>Generates an input element complete with label and wrapper div</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Field name, should be &quot;Modelname.fieldname&quot;&lt;/p&gt;" type="string" variable="$fieldName">
            <type>string</type>
          </tag>
          <tag name="param" line="153" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="153" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="153" description="" link="\MeTools\View\Helper\FormHelper::$inline"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fieldName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="216" package="Default">
        <name>create</name>
        <full_name>\MeTools\View\Helper\FormHelper::create()</full_name>
        <docblock line="216">
          <description>Returns a `&lt;form&gt;` element.</description>
          <long-description></long-description>
          <tag name="param" line="216" description="&lt;p&gt;The model name for which the form is being defined.&#10;If &lt;code&gt;false&lt;/code&gt; no model is used&lt;/p&gt;" type="mixed" variable="$model">
            <type>mixed</type>
          </tag>
          <tag name="param" line="216" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="216" description="An formatted opening `&lt;form&gt;` tag" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="216" description="" link="\MeTools\View\Helper\FormHelper::createInline()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$model</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="242" package="Default">
        <name>createInline</name>
        <full_name>\MeTools\View\Helper\FormHelper::createInline()</full_name>
        <docblock line="242">
          <description>Returns an inline form element.</description>
          <long-description>You can also create an inline form using the `create()` method with
 the `inline` option.

Note that by default `createInline` doesn't display help blocks and
 errors.</long-description>
          <tag name="param" line="242" description="&lt;p&gt;The model name for which the form is being defined.&#10;If &lt;code&gt;false&lt;/code&gt; no model is used&lt;/p&gt;" type="mixed" variable="$model">
            <type>mixed</type>
          </tag>
          <tag name="param" line="242" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="242" description="An formatted opening `&lt;form&gt;` tag" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="242" description="" link="\MeTools\View\Helper\FormHelper::$inline"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$model</name>
          <default>null</default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="261" package="Default">
        <name>datepicker</name>
        <full_name>\MeTools\View\Helper\FormHelper::datepicker()</full_name>
        <docblock line="261">
          <description>Creates a datepicker.</description>
          <long-description>To add the scripts for datepicker, you should use the `LibraryHelper`.</long-description>
          <tag name="param" line="261" description="&lt;p&gt;Field name, should be &quot;Modelname.fieldname&quot;&lt;/p&gt;" type="string" variable="$fieldName">
            <type>string</type>
          </tag>
          <tag name="param" line="261" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="261" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="261" description="" link="\MeTools\View\Helper\MeTools\View\Helper\LibraryHelper::datepicker()"/>
          <tag name="uses" line="261" description="" link="\MeTools\View\Helper\FormHelper::__datetimepickerOptions()"/>
          <tag name="uses" line="261" description="" link="\MeTools\View\Helper\FormHelper::control()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fieldName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="279" package="Default">
        <name>datetimepicker</name>
        <full_name>\MeTools\View\Helper\FormHelper::datetimepicker()</full_name>
        <docblock line="279">
          <description>Creates a datetimepicker.</description>
          <long-description>To add the scripts for datetimepicker, you should use the `LibraryHelper`.</long-description>
          <tag name="param" line="279" description="&lt;p&gt;Field name, should be &quot;Modelname.fieldname&quot;&lt;/p&gt;" type="string" variable="$fieldName">
            <type>string</type>
          </tag>
          <tag name="param" line="279" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="279" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="279" description="" link="\MeTools\View\Helper\MeTools\View\Helper\LibraryHelper::datetimepicker()"/>
          <tag name="uses" line="279" description="" link="\MeTools\View\Helper\FormHelper::__datetimepickerOptions()"/>
          <tag name="uses" line="279" description="" link="\MeTools\View\Helper\FormHelper::control()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fieldName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="295" package="Default">
        <name>end</name>
        <full_name>\MeTools\View\Helper\FormHelper::end()</full_name>
        <docblock line="295">
          <description>Closes an HTML form, cleans up values set by `FormHelper::create()`,
 and writes hidden input fields where appropriate</description>
          <long-description></long-description>
          <tag name="param" line="295" description="&lt;p&gt;Secure attibutes which will be passed&#10; as HTML attributes into the hidden input elements generated for the&#10; Security Component.&lt;/p&gt;" type="array" variable="$secureAttributes">
            <type>array</type>
          </tag>
          <tag name="return" line="295" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="295" description="" link="\MeTools\View\Helper\FormHelper::$inline"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$secureAttributes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="306" package="Default">
        <name>isInline</name>
        <full_name>\MeTools\View\Helper\FormHelper::isInline()</full_name>
        <docblock line="306">
          <description>Checks if the current opened form is an inline form</description>
          <long-description></long-description>
          <tag name="return" line="306" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="321" package="Default">
        <name>label</name>
        <full_name>\MeTools\View\Helper\FormHelper::label()</full_name>
        <docblock line="321">
          <description>Returns a formatted `&lt;label&gt;` element.</description>
          <long-description>Will automatically generate a `for` attribute if one is not provided.</long-description>
          <tag name="param" line="321" description="&lt;p&gt;Field name, should be &quot;Modelname.fieldname&quot;&lt;/p&gt;" type="string" variable="$fieldName">
            <type>string</type>
          </tag>
          <tag name="param" line="321" description="&lt;p&gt;Text that will appear in the label field. If is&#10; left undefined the text will be inflected from the fieldName&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="param" line="321" description="&lt;p&gt;HTML attributes, or a string to be used&#10; as a class name&lt;/p&gt;" type="array|string" variable="$options">
            <type>array</type>
            <type>string</type>
          </tag>
          <tag name="return" line="321" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fieldName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array|string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="345" package="Default">
        <name>postButton</name>
        <full_name>\MeTools\View\Helper\FormHelper::postButton()</full_name>
        <docblock line="345">
          <description>Creates a button with a surrounding form that submits via POST.</description>
          <long-description>This method creates a button in a form element. So don't use this
 method in an already opened form.

To create a normal button, you should use the `button()` method.
To create a button with the appearance of a link, you should use the
 `button()` method provided by the `HtmlHelper`.</long-description>
          <tag name="param" line="345" description="&lt;p&gt;Button title&lt;/p&gt;" type="string|null" variable="$title">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="345" description="&lt;p&gt;Cake-relative URL or array of URL&#10;parameters or external URL&lt;/p&gt;" type="string|array|null" variable="$url">
            <type>string</type>
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="345" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="345" description="Html code" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="345" description="" link="\MeTools\View\Helper\FormHelper::postLink()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default>null</default>
          <type>string|array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="366" package="Default">
        <name>postLink</name>
        <full_name>\MeTools\View\Helper\FormHelper::postLink()</full_name>
        <docblock line="366">
          <description>Creates a link with a surrounding form that submits via POST.</description>
          <long-description>This method creates a link in a form element. So don't use this method
 in an already opened form.

To create a normal link, you should use the `link()` method of the
 `HtmlHelper`.</long-description>
          <tag name="param" line="366" description="&lt;p&gt;The content to be wrapped by &lt;a&gt; tags&lt;/p&gt;" type="string|null" variable="$title">
            <type>string</type>
            <type>null</type>
          </tag>
          <tag name="param" line="366" description="&lt;p&gt;Cake-relative URL or array of URL&#10;parameters or external URL&lt;/p&gt;" type="string|array|null" variable="$url">
            <type>string</type>
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="366" description="&lt;p&gt;Array of options and HTML attributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="366" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default>null</default>
          <type>string|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default>null</default>
          <type>string|array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="383" package="Default">
        <name>select</name>
        <full_name>\MeTools\View\Helper\FormHelper::select()</full_name>
        <docblock line="383">
          <description>Returns a formatted SELECT element</description>
          <long-description></long-description>
          <tag name="param" line="383" description="&lt;p&gt;Name attribute of the SELECT&lt;/p&gt;" type="string" variable="$fieldName">
            <type>string</type>
          </tag>
          <tag name="param" line="383" description="&lt;p&gt;Array of the OPTION elements&#10;(as 'value'=&gt;'Text' pairs) to be used in the SELECT element&lt;/p&gt;" type="array|\Traversable" variable="$options">
            <type>array</type>
            <type>\Traversable</type>
          </tag>
          <tag name="param" line="383" description="&lt;p&gt;The HTML attributes of the select element&lt;/p&gt;" type="array" variable="$attributes">
            <type>array</type>
          </tag>
          <tag name="return" line="383" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fieldName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array|\Traversable</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$attributes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="402" package="Default">
        <name>submit</name>
        <full_name>\MeTools\View\Helper\FormHelper::submit()</full_name>
        <docblock line="402">
          <description>Creates a submit button</description>
          <long-description></long-description>
          <tag name="param" line="402" description="&lt;p&gt;The label appearing on the submit button or an&#10; image&lt;/p&gt;" type="string" variable="$caption">
            <type>string</type>
          </tag>
          <tag name="param" line="402" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="402" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="uses" line="402" description="" link="\MeTools\View\Helper\FormHelper::button()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$caption</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="415" package="Default">
        <name>textarea</name>
        <full_name>\MeTools\View\Helper\FormHelper::textarea()</full_name>
        <docblock line="415">
          <description>Creates a textarea widget</description>
          <long-description></long-description>
          <tag name="param" line="415" description="&lt;p&gt;Field name, should be &quot;Modelname.fieldname&quot;&lt;/p&gt;" type="string" variable="$fieldName">
            <type>string</type>
          </tag>
          <tag name="param" line="415" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="415" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fieldName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\View\Helper" line="433" package="Default">
        <name>timepicker</name>
        <full_name>\MeTools\View\Helper\FormHelper::timepicker()</full_name>
        <docblock line="433">
          <description>Creates a timepicker.</description>
          <long-description>To add the scripts for timepicker, you should use the `LibraryHelper`.</long-description>
          <tag name="param" line="433" description="&lt;p&gt;Field name, should be &quot;Modelname.fieldname&quot;&lt;/p&gt;" type="string" variable="$fieldName">
            <type>string</type>
          </tag>
          <tag name="param" line="433" description="&lt;p&gt;HTML attributes and options&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="433" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="see" line="433" description="" link="\MeTools\View\Helper\MeTools\View\Helper\LibraryHelper::timepicker()"/>
          <tag name="uses" line="433" description="" link="\MeTools\View\Helper\FormHelper::__datetimepickerOptions()"/>
          <tag name="uses" line="433" description="" link="\MeTools\View\Helper\FormHelper::control()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fieldName</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Command/Install/CreateDirectoriesCommand.php" generated-path="Command.Install.CreateDirectoriesCommand.html" hash="cbd379c0236412c4999f68788b22354e" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.0"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Arguments">\Cake\Console\Arguments</namespace-alias>
    <namespace-alias name="ConsoleIo">\Cake\Console\ConsoleIo</namespace-alias>
    <namespace-alias name="ConsoleOptionParser">\Cake\Console\ConsoleOptionParser</namespace-alias>
    <namespace-alias name="Configure">\Cake\Core\Configure</namespace-alias>
    <namespace-alias name="Command">\MeTools\Console\Command</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Command\Install" line="25" package="Default">
      <extends>\MeTools\Console\Command</extends>
      <name>CreateDirectoriesCommand</name>
      <full_name>\MeTools\Command\Install\CreateDirectoriesCommand</full_name>
      <docblock line="25">
        <description>Creates default directories</description>
        <long-description></long-description>
        <tag name="package" line="25" description="Default"/>
        <tag name="inherited_from" description="\MeTools\Console\Command" refers="\MeTools\Console\Command" link="/classes/MeTools.Console.Command.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="32" package="Default">
        <name>buildOptionParser</name>
        <full_name>\MeTools\Command\Install\CreateDirectoriesCommand::buildOptionParser()</full_name>
        <docblock line="32">
          <description>Hook method for defining this command's option parser</description>
          <long-description></long-description>
          <tag name="param" line="32" description="&lt;p&gt;The parser to be defined&lt;/p&gt;" type="\Cake\Console\ConsoleOptionParser" variable="$parser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
          <tag name="return" line="32" description="" type="\Cake\Console\ConsoleOptionParser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parser</name>
          <default></default>
          <type>\Cake\Console\ConsoleOptionParser</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="44" package="Default">
        <name>execute</name>
        <full_name>\MeTools\Command\Install\CreateDirectoriesCommand::execute()</full_name>
        <docblock line="44">
          <description>Creates default directories</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;The command arguments&lt;/p&gt;" type="\Cake\Console\Arguments" variable="$args">
            <type>\Cake\Console\Arguments</type>
          </tag>
          <tag name="param" line="44" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="return" line="44" description="The exit code or null for success" type="null|integer">
            <type>null</type>
            <type>integer</type>
          </tag>
          <tag name="uses" line="44" description="" link="\MeTools\Console\Command::createDir()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>\Cake\Console\Arguments</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="34" package="Default">
        <name>verboseIfFileExists</name>
        <full_name>\MeTools\Console\Command::verboseIfFileExists()</full_name>
        <docblock line="34">
          <description>Internal method to check if a file already exists and output a warning at
 the verbose level</description>
          <long-description></long-description>
          <tag name="param" line="34" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="34" description="&lt;p&gt;Path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="34" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="53" package="Default">
        <name>copyFile</name>
        <full_name>\MeTools\Console\Command::copyFile()</full_name>
        <docblock line="53">
          <description>Copies a file</description>
          <long-description></long-description>
          <tag name="param" line="53" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Source file&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Destination file&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="53" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="53" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="85" package="Default">
        <name>createDir</name>
        <full_name>\MeTools\Console\Command::createDir()</full_name>
        <docblock line="85">
          <description>Creates a directory.</description>
          <long-description>This method creates directories recursively.</long-description>
          <tag name="param" line="85" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;Directory path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::folderChmod()"/>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="111" package="Default">
        <name>createFile</name>
        <full_name>\MeTools\Console\Command::createFile()</full_name>
        <docblock line="111">
          <description>Creates a file at given path</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Where to put the file&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Content to put in the file&lt;/p&gt;" type="string" variable="$contents">
            <type>string</type>
          </tag>
          <tag name="return" line="111" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="111" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contents</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="123" package="Default">
        <name>createLink</name>
        <full_name>\MeTools\Console\Command::createLink()</full_name>
        <docblock line="123">
          <description>Creates a symbolic link</description>
          <long-description></long-description>
          <tag name="param" line="123" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Source file or directory&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Destination file or directory&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="154" package="Default">
        <name>folderChmod</name>
        <full_name>\MeTools\Console\Command::folderChmod()</full_name>
        <docblock line="154">
          <description>Sets folder chmods.</description>
          <long-description>This method applies permissions recursively.</long-description>
          <tag name="param" line="154" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Folder path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Chmod&lt;/p&gt;" type="integer" variable="$chmod">
            <type>integer</type>
          </tag>
          <tag name="return" line="154" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$chmod</name>
          <default>511</default>
          <type>integer</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
    </class>
  </file>
  <file path="TestSuite/ComponentTestCase.php" generated-path="TestSuite.ComponentTestCase.html" hash="c57bcbf28e5bfe6fdadb930db680dab7" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.17.5"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="TestCase">\MeTools\TestSuite\TestCase</namespace-alias>
    <class final="false" abstract="true" namespace="MeTools\TestSuite" line="21" package="Default">
      <extends>\MeTools\TestSuite\TestCase</extends>
      <name>ComponentTestCase</name>
      <full_name>\MeTools\TestSuite\ComponentTestCase</full_name>
      <docblock line="21">
        <description>Abstract class for test components</description>
        <long-description></long-description>
        <tag name="package" line="21" description="Default"/>
        <tag name="inherited_from" description="\MeTools\TestSuite\TestCase" refers="\MeTools\TestSuite\TestCase" link="/classes/MeTools.TestSuite.TestCase.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="MeTools\TestSuite" line="27" package="Default">
        <name>$Component</name>
        <full_name>\MeTools\TestSuite\ComponentTestCase::$Component</full_name>
        <default></default>
        <docblock line="27">
          <description>Component instance</description>
          <long-description></long-description>
          <tag name="var" line="27" description="" type="\Cake\Controller\Component|\PHPUnit_Framework_MockObject_MockObject" variable="">
            <type>\Cake\Controller\Component</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="MeTools\TestSuite" line="33" package="Default">
        <name>$autoInitializeClass</name>
        <full_name>\MeTools\TestSuite\ComponentTestCase::$autoInitializeClass</full_name>
        <default>true</default>
        <docblock line="33">
          <description>If `true`, a mock instance of the component will be created</description>
          <long-description></long-description>
          <tag name="var" line="33" description="" type="boolean" variable="">
            <type>boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="41" package="Default">
        <name>setUp</name>
        <full_name>\MeTools\TestSuite\ComponentTestCase::setUp()</full_name>
        <docblock line="41">
          <description>Called before every test method</description>
          <long-description></long-description>
          <tag name="return" line="41" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="41" description="" link="\MeTools\TestSuite\ComponentTestCase::$Component"/>
          <tag name="uses" line="41" description="" link="\MeTools\TestSuite\ComponentTestCase::$autoInitializeClass"/>
          <tag name="inherited_from" description="\MeTools\TestSuite\TestCase::setUp()" refers="\MeTools\TestSuite\TestCase::setUp()" link="/classes/MeTools.TestSuite.TestCase.html#method_setUp"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="38" package="Default">
        <name>setUp</name>
        <full_name>\MeTools\TestSuite\TestCase::setUp()</full_name>
        <docblock line="38">
          <description>Called before every test method</description>
          <long-description></long-description>
          <tag name="return" line="38" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="49" package="Default">
        <name>tearDown</name>
        <full_name>\MeTools\TestSuite\TestCase::tearDown()</full_name>
        <docblock line="49">
          <description>Called after every test method</description>
          <long-description></long-description>
          <tag name="return" line="49" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="70" package="Default">
        <name>getLogFullPath</name>
        <full_name>\MeTools\TestSuite\TestCase::getLogFullPath()</full_name>
        <docblock line="70">
          <description>Internal method to get a log full path</description>
          <long-description></long-description>
          <tag name="param" line="70" description="&lt;p&gt;Log filename&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="70" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="since" line="70" description="2.16.10"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="86" package="Default">
        <name>getTable</name>
        <full_name>\MeTools\TestSuite\TestCase::getTable()</full_name>
        <docblock line="86">
          <description>Get a table instance from the registry</description>
          <long-description></long-description>
          <tag name="param" line="86" description="&lt;p&gt;The alias name you want to get&lt;/p&gt;" type="string" variable="$alias">
            <type>string</type>
          </tag>
          <tag name="param" line="86" description="&lt;p&gt;The options you want to build the table with&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="86" description="" type="\Cake\ORM\Table|null">
            <type>\Cake\ORM\Table</type>
            <type>null</type>
          </tag>
          <tag name="since" line="86" description="2.18.11"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$alias</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="106" package="Default">
        <name>assertLogContains</name>
        <full_name>\MeTools\TestSuite\TestCase::assertLogContains()</full_name>
        <docblock line="106">
          <description>Asserts log file contents</description>
          <long-description></long-description>
          <tag name="param" line="106" description="&lt;p&gt;The expected contents&lt;/p&gt;" type="string" variable="$expectedContent">
            <type>string</type>
          </tag>
          <tag name="param" line="106" description="&lt;p&gt;Log filename&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="param" line="106" description="&lt;p&gt;The failure message that will be appended to the&#10; generated message&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="return" line="106" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="106" description="" link="\MeTools\TestSuite\TestCase::getLogFullPath()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expectedContent</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="126" package="Default">
        <name>deleteLog</name>
        <full_name>\MeTools\TestSuite\TestCase::deleteLog()</full_name>
        <docblock line="126">
          <description>Deletes a log file</description>
          <long-description></long-description>
          <tag name="param" line="126" description="&lt;p&gt;Log filename&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="126" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="126" description="" link="\MeTools\TestSuite\TestCase::getLogFullPath()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\TestCase</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="31" package="Default">
        <name>getControllerAlias</name>
        <full_name>\MeTools\TestSuite\MockTrait::getControllerAlias()</full_name>
        <docblock line="31">
          <description>Gets the alias for a controller</description>
          <long-description></long-description>
          <tag name="param" line="31" description="&lt;p&gt;Controller class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="return" line="31" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="throws" line="31" description="" type="\ReflectionException">
            <type>\ReflectionException</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="42" package="Default">
        <name>getMockForComponent</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForComponent()</full_name>
        <docblock line="42">
          <description>Mocks a component</description>
          <long-description></long-description>
          <tag name="param" line="42" description="&lt;p&gt;Component class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="42" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="return" line="42" description="" type="\Cake\Controller\Component|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\Controller\Component</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="58" package="Default">
        <name>getMockForController</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForController()</full_name>
        <docblock line="58">
          <description>Mocks a controller</description>
          <long-description></long-description>
          <tag name="param" line="58" description="&lt;p&gt;Controller class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;Controller alias&lt;/p&gt;" type="string" variable="$alias">
            <type>string</type>
          </tag>
          <tag name="return" line="58" description="" type="\Cake\Controller\Controller|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\Controller\Controller</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
          <tag name="uses" line="58" description="" link="\MeTools\TestSuite\MockTrait::getControllerAlias()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$alias</name>
          <default>null</default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\TestSuite" line="75" package="Default">
        <name>getMockForHelper</name>
        <full_name>\MeTools\TestSuite\MockTrait::getMockForHelper()</full_name>
        <docblock line="75">
          <description>Mocks an helper</description>
          <long-description></long-description>
          <tag name="param" line="75" description="&lt;p&gt;Helper class name&lt;/p&gt;" type="string" variable="$className">
            <type>string</type>
          </tag>
          <tag name="param" line="75" description="&lt;p&gt;The list of methods to mock&lt;/p&gt;" type="array|null" variable="$methods">
            <type>array</type>
            <type>null</type>
          </tag>
          <tag name="return" line="75" description="" type="\Cake\View\Helper|\PHPUnit_Framework_MockObject_MockObject">
            <type>\Cake\View\Helper</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$className</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$methods</name>
          <default>array()</default>
          <type>array|null</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="93" package="Default">
        <name>getOriginClassName</name>
        <full_name>\MeTools\TestSuite\MockTrait::getOriginClassName()</full_name>
        <docblock line="93">
          <description>Gets the classname for which a test is being performed, starting from the
 test class name.</description>
          <long-description>Example: class `MyPlugin\Test\TestCase\Controller\PagesControllerTest`
 will return the string `MyPlugin\Controller\PagesController`.</long-description>
          <tag name="param" line="93" description="&lt;p&gt;A test class as object or string&lt;/p&gt;" type="object|string" variable="$testClass">
            <type>object</type>
            <type>string</type>
          </tag>
          <tag name="return" line="93" description="The class name for which a test is being performed" type="string">
            <type>string</type>
          </tag>
          <tag name="since" line="93" description="2.18.0"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$testClass</name>
          <default></default>
          <type>object|string</type>
        </argument>
        <inherited_from>\MeTools\TestSuite\MockTrait</inherited_from>
      </method>
    </class>
  </file>
  <file path="TestSuite/ConsoleIntegrationTestTrait.php" generated-path="TestSuite.ConsoleIntegrationTestTrait.html" hash="00f4346fa0470ab977cd76b3652d687a" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.0"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="BaseConsoleIntegrationTestTrait">\Cake\TestSuite\ConsoleIntegrationTestTrait</namespace-alias>
    <namespace-alias name="Command">\MeTools\Console\Command</namespace-alias>
    <trait namespace="MeTools\TestSuite" line="22" package="Default">
      <name>ConsoleIntegrationTestTrait</name>
      <full_name>\MeTools\TestSuite\ConsoleIntegrationTestTrait</full_name>
      <docblock line="22">
        <description>A trait intended to make integration tests of cake console commands easier</description>
        <long-description></long-description>
        <tag name="package" line="22" description="Default"/>
      </docblock>
      <property static="false" visibility="protected" namespace="MeTools\TestSuite" line="30" package="Default">
        <name>$Command</name>
        <full_name>\MeTools\TestSuite\ConsoleIntegrationTestTrait::$Command</full_name>
        <default></default>
        <docblock line="30">
          <description>Command instance</description>
          <long-description></long-description>
          <tag name="var" line="30" description="" type="\MeTools\Console\Command|\PHPUnit_Framework_MockObject_MockObject" variable="">
            <type>\MeTools\Console\Command</type>
            <type>\PHPUnit_Framework_MockObject_MockObject</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="38" package="Default">
        <name>setUp</name>
        <full_name>\MeTools\TestSuite\ConsoleIntegrationTestTrait::setUp()</full_name>
        <docblock line="38">
          <description>Called before every test method</description>
          <long-description></long-description>
          <tag name="return" line="38" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="uses" line="38" description="" link="\MeTools\TestSuite\ConsoleIntegrationTestTrait::$Command"/>
          <tag name="uses" line="38" description="" link="\MeTools\TestSuite\$autoInitializeClass"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="66" package="Default">
        <name>assertExitWithError</name>
        <full_name>\MeTools\TestSuite\ConsoleIntegrationTestTrait::assertExitWithError()</full_name>
        <docblock line="66">
          <description>Asserts shell exited with the error code</description>
          <long-description></long-description>
          <tag name="param" line="66" description="&lt;p&gt;Failure message to be appended to the generated&#10; message&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="return" line="66" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="77" package="Default">
        <name>assertExitWithSuccess</name>
        <full_name>\MeTools\TestSuite\ConsoleIntegrationTestTrait::assertExitWithSuccess()</full_name>
        <docblock line="77">
          <description>Asserts shell exited with the success code</description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;Failure message to be appended to the generated&#10; message&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="return" line="77" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\TestSuite" line="89" package="Default">
        <name>assertOutputNotEmpty</name>
        <full_name>\MeTools\TestSuite\ConsoleIntegrationTestTrait::assertOutputNotEmpty()</full_name>
        <docblock line="89">
          <description>Asserts that `stdout` is not empty</description>
          <long-description></long-description>
          <tag name="param" line="89" description="&lt;p&gt;Failure message to be appended to the generated&#10; message&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="return" line="89" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="since" line="89" description="2.17.6"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default>'stdout was empty'</default>
          <type>string</type>
        </argument>
      </method>
    </trait>
  </file>
  <file path="Command/Install/CreateVendorsLinksCommand.php" generated-path="Command.Install.CreateVendorsLinksCommand.html" hash="072ac271d6ff72a1165fcb15e9b31f24" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.18.0"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="Arguments">\Cake\Console\Arguments</namespace-alias>
    <namespace-alias name="ConsoleIo">\Cake\Console\ConsoleIo</namespace-alias>
    <namespace-alias name="ConsoleOptionParser">\Cake\Console\ConsoleOptionParser</namespace-alias>
    <namespace-alias name="Configure">\Cake\Core\Configure</namespace-alias>
    <namespace-alias name="Command">\MeTools\Console\Command</namespace-alias>
    <class final="false" abstract="false" namespace="MeTools\Command\Install" line="25" package="Default">
      <extends>\MeTools\Console\Command</extends>
      <name>CreateVendorsLinksCommand</name>
      <full_name>\MeTools\Command\Install\CreateVendorsLinksCommand</full_name>
      <docblock line="25">
        <description>Creates symbolic links for vendor assets</description>
        <long-description></long-description>
        <tag name="package" line="25" description="Default"/>
        <tag name="inherited_from" description="\MeTools\Console\Command" refers="\MeTools\Console\Command" link="/classes/MeTools.Console.Command.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="32" package="Default">
        <name>buildOptionParser</name>
        <full_name>\MeTools\Command\Install\CreateVendorsLinksCommand::buildOptionParser()</full_name>
        <docblock line="32">
          <description>Hook method for defining this command's option parser</description>
          <long-description></long-description>
          <tag name="param" line="32" description="&lt;p&gt;The parser to be defined&lt;/p&gt;" type="\Cake\Console\ConsoleOptionParser" variable="$parser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
          <tag name="return" line="32" description="" type="\Cake\Console\ConsoleOptionParser">
            <type>\Cake\Console\ConsoleOptionParser</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parser</name>
          <default></default>
          <type>\Cake\Console\ConsoleOptionParser</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="44" package="Default">
        <name>execute</name>
        <full_name>\MeTools\Command\Install\CreateVendorsLinksCommand::execute()</full_name>
        <docblock line="44">
          <description>Creates symbolic links for vendor assets</description>
          <long-description></long-description>
          <tag name="param" line="44" description="&lt;p&gt;The command arguments&lt;/p&gt;" type="\Cake\Console\Arguments" variable="$args">
            <type>\Cake\Console\Arguments</type>
          </tag>
          <tag name="param" line="44" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="return" line="44" description="The exit code or null for success" type="null|integer">
            <type>null</type>
            <type>integer</type>
          </tag>
          <tag name="uses" line="44" description="" link="\MeTools\Console\Command::createLink()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>\Cake\Console\Arguments</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Command\Install" line="34" package="Default">
        <name>verboseIfFileExists</name>
        <full_name>\MeTools\Console\Command::verboseIfFileExists()</full_name>
        <docblock line="34">
          <description>Internal method to check if a file already exists and output a warning at
 the verbose level</description>
          <long-description></long-description>
          <tag name="param" line="34" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="34" description="&lt;p&gt;Path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="34" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="53" package="Default">
        <name>copyFile</name>
        <full_name>\MeTools\Console\Command::copyFile()</full_name>
        <docblock line="53">
          <description>Copies a file</description>
          <long-description></long-description>
          <tag name="param" line="53" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Source file&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Destination file&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="53" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="53" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="85" package="Default">
        <name>createDir</name>
        <full_name>\MeTools\Console\Command::createDir()</full_name>
        <docblock line="85">
          <description>Creates a directory.</description>
          <long-description>This method creates directories recursively.</long-description>
          <tag name="param" line="85" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;Directory path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::folderChmod()"/>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="111" package="Default">
        <name>createFile</name>
        <full_name>\MeTools\Console\Command::createFile()</full_name>
        <docblock line="111">
          <description>Creates a file at given path</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Where to put the file&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Content to put in the file&lt;/p&gt;" type="string" variable="$contents">
            <type>string</type>
          </tag>
          <tag name="return" line="111" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="111" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contents</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="123" package="Default">
        <name>createLink</name>
        <full_name>\MeTools\Console\Command::createLink()</full_name>
        <docblock line="123">
          <description>Creates a symbolic link</description>
          <long-description></long-description>
          <tag name="param" line="123" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Source file or directory&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Destination file or directory&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Command\Install" line="154" package="Default">
        <name>folderChmod</name>
        <full_name>\MeTools\Console\Command::folderChmod()</full_name>
        <docblock line="154">
          <description>Sets folder chmods.</description>
          <long-description>This method applies permissions recursively.</long-description>
          <tag name="param" line="154" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Folder path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Chmod&lt;/p&gt;" type="integer" variable="$chmod">
            <type>integer</type>
          </tag>
          <tag name="return" line="154" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$chmod</name>
          <default>511</default>
          <type>integer</type>
        </argument>
        <inherited_from>\MeTools\Console\Command</inherited_from>
      </method>
    </class>
  </file>
  <file path="Console/Command.php" generated-path="Console.Command.html" hash="b79a691834b0288f1bd0d64523ccf933" package="Default">
    <docblock line="0">
      <description>This file is part of me-tools.</description>
      <long-description>Licensed under The MIT License
For full copyright and license information, please see the LICENSE.txt
Redistributions of files must retain the above copyright notice.</long-description>
      <tag name="copyright" line="0" description="Copyright (c) Mirko Pagliai"/>
      <tag name="link" line="0" description="https://github.com/mirko-pagliai/me-tools" link="https://github.com/mirko-pagliai/me-tools"/>
      <tag name="license" line="0" description="MIT License" link="https://opensource.org/licenses/mit-license.php"/>
      <tag name="since" line="0" description="2.17.6"/>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <namespace-alias name="CakeCommand">\Cake\Console\Command</namespace-alias>
    <namespace-alias name="ConsoleIo">\Cake\Console\ConsoleIo</namespace-alias>
    <namespace-alias name="Exception">\Exception</namespace-alias>
    <namespace-alias name="IOException">\Symfony\Component\Filesystem\Exception\IOException</namespace-alias>
    <namespace-alias name="Filesystem">\Symfony\Component\Filesystem\Filesystem</namespace-alias>
    <class final="false" abstract="true" namespace="MeTools\Console" line="25" package="Default">
      <extends>\Cake\Console\Command</extends>
      <name>Command</name>
      <full_name>\MeTools\Console\Command</full_name>
      <docblock line="25">
        <description>Base class for console commands</description>
        <long-description></long-description>
        <tag name="package" line="25" description="Default"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="MeTools\Console" line="34" package="Default">
        <name>verboseIfFileExists</name>
        <full_name>\MeTools\Console\Command::verboseIfFileExists()</full_name>
        <docblock line="34">
          <description>Internal method to check if a file already exists and output a warning at
 the verbose level</description>
          <long-description></long-description>
          <tag name="param" line="34" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="34" description="&lt;p&gt;Path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="34" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Console" line="53" package="Default">
        <name>copyFile</name>
        <full_name>\MeTools\Console\Command::copyFile()</full_name>
        <docblock line="53">
          <description>Copies a file</description>
          <long-description></long-description>
          <tag name="param" line="53" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Source file&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="53" description="&lt;p&gt;Destination file&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="53" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="53" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Console" line="85" package="Default">
        <name>createDir</name>
        <full_name>\MeTools\Console\Command::createDir()</full_name>
        <docblock line="85">
          <description>Creates a directory.</description>
          <long-description>This method creates directories recursively.</long-description>
          <tag name="param" line="85" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="85" description="&lt;p&gt;Directory path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="return" line="85" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::folderChmod()"/>
          <tag name="uses" line="85" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Console" line="111" package="Default">
        <name>createFile</name>
        <full_name>\MeTools\Console\Command::createFile()</full_name>
        <docblock line="111">
          <description>Creates a file at given path</description>
          <long-description></long-description>
          <tag name="param" line="111" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Where to put the file&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="111" description="&lt;p&gt;Content to put in the file&lt;/p&gt;" type="string" variable="$contents">
            <type>string</type>
          </tag>
          <tag name="return" line="111" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="uses" line="111" description="" link="\MeTools\Console\Command::verboseIfFileExists()"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$contents</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Console" line="123" package="Default">
        <name>createLink</name>
        <full_name>\MeTools\Console\Command::createLink()</full_name>
        <docblock line="123">
          <description>Creates a symbolic link</description>
          <long-description></long-description>
          <tag name="param" line="123" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Source file or directory&lt;/p&gt;" type="string" variable="$source">
            <type>string</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Destination file or directory&lt;/p&gt;" type="string" variable="$dest">
            <type>string</type>
          </tag>
          <tag name="return" line="123" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$source</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$dest</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="MeTools\Console" line="154" package="Default">
        <name>folderChmod</name>
        <full_name>\MeTools\Console\Command::folderChmod()</full_name>
        <docblock line="154">
          <description>Sets folder chmods.</description>
          <long-description>This method applies permissions recursively.</long-description>
          <tag name="param" line="154" description="&lt;p&gt;The console io&lt;/p&gt;" type="\Cake\Console\ConsoleIo" variable="$io">
            <type>\Cake\Console\ConsoleIo</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Folder path&lt;/p&gt;" type="string" variable="$path">
            <type>string</type>
          </tag>
          <tag name="param" line="154" description="&lt;p&gt;Chmod&lt;/p&gt;" type="integer" variable="$chmod">
            <type>integer</type>
          </tag>
          <tag name="return" line="154" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$io</name>
          <default></default>
          <type>\Cake\Console\ConsoleIo</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$chmod</name>
          <default>511</default>
          <type>integer</type>
        </argument>
      </method>
    </class>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="global" full_name="global"/>
  <namespace name="global" full_name="global"/>
  <namespace name="MeTools" full_name="MeTools">
    <namespace name="Command" full_name="MeTools\Command">
      <namespace name="Install" full_name="MeTools\Command\Install"/>
    </namespace>
    <namespace name="Console" full_name="MeTools\Console"/>
    <namespace name="Controller" full_name="MeTools\Controller">
      <namespace name="Component" full_name="MeTools\Controller\Component"/>
    </namespace>
    <namespace name="Core" full_name="MeTools\Core"/>
    <namespace name="TestSuite" full_name="MeTools\TestSuite"/>
    <namespace name="Utility" full_name="MeTools\Utility"/>
    <namespace name="View" full_name="MeTools\View">
      <namespace name="Helper" full_name="MeTools\View\Helper"/>
      <namespace name="Widget" full_name="MeTools\View\Widget"/>
    </namespace>
  </namespace>
  <deprecated count="1"/>
</project>
